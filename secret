-- Snake Auto-Farm â€” with Quest NPC Tab, AutoQuest, Movement, and AutoDailyQuest
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
if not player then return end

-- ===== QUEST NPC LIST =====
local QUEST_NPCS = {
	{name = "Bandit Daily Guy", path = workspace.FriendlyNpcs:FindFirstChild("Bandit Daily Guy")},
	{name = "Bandit Victim", path = workspace.FriendlyNpcs:FindFirstChild("Bandit Victim")},
	{name = "Bear Master", path = workspace.FriendlyNpcs:FindFirstChild("Bear Master")},
	{name = "Bounty Guy", path = workspace.FriendlyNpcs:FindFirstChild("Bounty Guy")},
	{name = "Bulma", path = workspace.FriendlyNpcs:FindFirstChild("Bulma")},
	{name = "BuuPreludeQuestGiver", path = workspace.FriendlyNpcs:FindFirstChild("BuuPreludeQuestGiver")},
	{name = "CellJrQuest", path = workspace.FriendlyNpcs:FindFirstChild("CellJrQuest")},
	{name = "ChefBoyardeQuest", path = workspace.FriendlyNpcs:FindFirstChild("ChefBoyardeQuest")},
	{name = "Chichi", path = workspace.FriendlyNpcs:FindFirstChild("Chichi")},
	{name = "ClankerHater", path = workspace.FriendlyNpcs:FindFirstChild("ClankerHater")},
	{name = "Crane Student", path = workspace.FriendlyNpcs:FindFirstChild("Crane Student")},
	{name = "Dr Brief", path = workspace.FriendlyNpcs:FindFirstChild("Dr Brief")},
	{name = "Fisher Joe", path = workspace.FriendlyNpcs:FindFirstChild("Fisher Joe")},
	{name = "Friendly Giras", path = workspace.FriendlyNpcs:FindFirstChild("Friendly Giras")},
	{name = "FrogFinder", path = workspace.FriendlyNpcs:FindFirstChild("FrogFinder")},
	{name = "Gorilla Master", path = workspace.FriendlyNpcs:FindFirstChild("Gorilla Master")},
	{name = "Goten", path = workspace.FriendlyNpcs:FindFirstChild("Goten")},
	{name = "Insane Bolt", path = workspace.FriendlyNpcs:FindFirstChild("Insane Bolt")},
	{name = "Namekian 1", path = workspace.FriendlyNpcs:FindFirstChild("Namekian 1")},
	{name = "Old Man", path = workspace.FriendlyNpcs:FindFirstChild("Old Man")},
	{name = "OrangeStarBaseballQuest", path = workspace.FriendlyNpcs:FindFirstChild("OrangeStarBaseballQuest")},
	{name = "Pest Guy", path = workspace.FriendlyNpcs:FindFirstChild("Pest Guy")},
	{name = "Piccolo", path = workspace.FriendlyNpcs:FindFirstChild("Piccolo")},
	{name = "Pirate Captain", path = workspace.FriendlyNpcs:FindFirstChild("Pirate Captain")},
	{name = "Police Chief", path = workspace.FriendlyNpcs:FindFirstChild("Police Chief")},
	{name = "Pvp Trainer", path = workspace.FriendlyNpcs:FindFirstChild("Pvp Trainer")},
	{name = "Quest Giver 10", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 10")},
	{name = "Quest Giver 11", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 11")},
	{name = "Quest Giver 12", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 12")},
	{name = "Quest Giver 13", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 13")},
	{name = "Quest Giver 15", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 15")},
	{name = "Quest Giver 16", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 16")},
	{name = "Quest Giver 17", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 17")},
	{name = "Quest Giver 18", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 18")},
	{name = "Quest Giver 2", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 2")},
	{name = "Quest Giver 20", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 20")},
	{name = "Quest Giver 22", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 22")},
	{name = "Quest Giver 24", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 24")},
	{name = "Quest Giver 25", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 25")},
	{name = "Quest Giver 26", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 26")},
	{name = "Quest Giver 27", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 27")},
	{name = "Quest Giver 28", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 28")},
	{name = "Quest Giver 29", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 29")},
	{name = "Quest Giver 3", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 3")},
	{name = "Quest Giver 4", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 4")},
	{name = "Quest Giver 6", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 6")},
	{name = "Quest Giver 7", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 7")},
	{name = "Quest Giver 8", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver 8")},
	{name = "Quest Giver EggGuy", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver EggGuy")},
	{name = "Quest Giver Saiyans", path = workspace.FriendlyNpcs:FindFirstChild("Quest Giver Saiyans")},
	{name = "Rabbit Victim", path = workspace.FriendlyNpcs:FindFirstChild("Rabbit Victim")},
	{name = "RankedTP", path = workspace.FriendlyNpcs:FindFirstChild("RankedTP")},
	{name = "Red Ribbon Giver", path = workspace.FriendlyNpcs:FindFirstChild("Red Ribbon Giver")},
	{name = "Roshi", path = workspace.FriendlyNpcs:FindFirstChild("Roshi")},
	{name = "Scientist", path = workspace.FriendlyNpcs:FindFirstChild("Scientist")},
	{name = "SoccerDaily", path = workspace.FriendlyNpcs:FindFirstChild("SoccerDaily")},
	{name = "StoryQuest Giver", path = workspace.FriendlyNpcs:FindFirstChild("StoryQuest Giver")},
	{name = "SupremeKai", path = workspace.FriendlyNpcs:FindFirstChild("SupremeKai")},
	{name = "The Hunter", path = workspace.FriendlyNpcs:FindFirstChild("The Hunter")},
	{name = "Tien", path = workspace.FriendlyNpcs:FindFirstChild("Tien")},
	{name = "Track Star", path = workspace.FriendlyNpcs:FindFirstChild("Track Star")},
	{name = "Treasure Hunter", path = workspace.FriendlyNpcs:FindFirstChild("Treasure Hunter")},
	{name = "Univerasl Champ Quest Giver", path = workspace.FriendlyNpcs:FindFirstChild("Univerasl Champ Quest Giver")},
	{name = "Vegeta", path = workspace.FriendlyNpcs:FindFirstChild("Vegeta")},
	{name = "Victim", path = workspace.FriendlyNpcs:FindFirstChild("Victim")},
	{name = "YamQuest", path = workspace.FriendlyNpcs:FindFirstChild("YamQuest")},
	{name = "Yamcha", path = workspace.FriendlyNpcs:FindFirstChild("Yamcha")},
	{name = "Young Man", path = workspace.FriendlyNpcs:FindFirstChild("Young Man")},
}

-- ===== DAILY QUEST NPCs =====
local DAILY_QUEST_NPCS = {
    {
        name = "Yamcha",
        npcPath = "Yamcha",
        questName = "Destroy the saibamen",
        questId = "SaibaDaily",
        tasks = {
            {enemy = "Saibablue", count = 20},
            {enemy = "Saibaman", count = 20}
        },
        totalKills = 40,
        sequence = function()
            local backpack = player:WaitForChild("Backpack")
            local inputEvent = backpack:WaitForChild("Input")
            local tagEvent = game:GetService("ReplicatedStorage"):WaitForChild("Requests"):WaitForChild("TagReplicate")
            
            inputEvent:FireServer("startchat", workspace.FriendlyNpcs.Yamcha)
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance", "Totally")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name], {
                [""..tick()..player.Name.."slow0"] = { "slow", true, workspace.Live[player.Name], ""..tick()..player.Name.."slow0" }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "You think so too huh? Go fight them?")
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "chat_choices", {
                No = { Messages = { "You're wrong" } },
                Totally = { Completed = { GiveQuest = "SaibaDaily" }, Messages = { "Yeah man go get em!" } }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "Yeah man go get em!")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "endchat")
            task.wait(0.5)
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name])
        end
    },
    {
        name = "ChefBoyardeQuest",
        npcPath = "ChefBoyardeQuest",
        questName = "L'ingredient secret",
        questId = "FrogLegsDaily",
        tasks = {
            {enemy = "Frog", count = 8}
        },
        totalKills = 8,
        sequence = function()
            local backpack = player:WaitForChild("Backpack")
            local inputEvent = backpack:WaitForChild("Input")
            local tagEvent = game:GetService("ReplicatedStorage"):WaitForChild("Requests"):WaitForChild("TagReplicate")
            
            inputEvent:FireServer("startchat", workspace.FriendlyNpcs.ChefBoyardeQuest)
            task.wait(0.5)
            for i = 1, 5 do
                inputEvent:FireServer("chatadvance")
                task.wait(0.5)
            end
            inputEvent:FireServer("chatadvance", "Sure")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name], {
                [""..tick()..player.Name.."slow0"] = { "slow", true, workspace.Live[player.Name], ""..tick()..player.Name.."slow0" }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "My family's restaurant has served as a pillar of the community for generations.")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "Unfortunately, thanks to that pesky [red]Rabbit Gang[/red] my supply of frog legs have been cut off for weeks now!")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "Luckily I know a spot nearby filled with those tasty amphibians!")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "Care to help me out, mon ami?")
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "chat_choices", {
                No = { Messages = { "Tsk." } },
                Sure = { Completed = { GiveQuest = "FrogLegsDaily" }, Messages = { "Merci mon ami!" } }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "Merci mon ami!")
            task.wait(0.5)
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name])
        end
    },
    {
        name = "Bandit Daily Guy",
        npcPath = "Bandit Daily Guy",
        questName = "Bandit Beater",
        questId = "BanditDaily",
        tasks = {
            {enemy = "Female Bandit", count = 3},
            {enemy = "Bandit", count = 3}
        },
        totalKills = 6,
        sequence = function()
            local backpack = player:WaitForChild("Backpack")
            local inputEvent = backpack:WaitForChild("Input")
            local tagEvent = game:GetService("ReplicatedStorage"):WaitForChild("Requests"):WaitForChild("TagReplicate")
            
            inputEvent:FireServer("startchat", workspace.FriendlyNpcs["Bandit Daily Guy"])
            task.wait(0.5)
            for i = 1, 4 do
                inputEvent:FireServer("chatadvance")
                task.wait(0.5)
            end
            inputEvent:FireServer("chatadvance", "Okay")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name], {
                [""..tick()..player.Name.."slow0"] = { "slow", true, workspace.Live[player.Name], ""..tick()..player.Name.."slow0" }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "Hm....")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "You look strong, maybe you can scare them off with your sheer might?")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "Yeah if you can beat them all without a single scratch, they'll be too scared to harass anyone else!")
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "chat_choices", {
                Impossible = "Not if you believe in yourself.",
                Okay = { Completed = { GiveQuest = "BanditDaily" }, Messages = { "Yeah go BEAT those BANDITS! But don't get hit!" } }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "Yeah go BEAT those BANDITS! But don't get hit!")
            task.wait(0.5)
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name])
        end
    },
    {
        name = "Goten",
        npcPath = "Goten",
        questName = "The Southern Mountain Skinwalker",
        questId = "Wendigo",
        tasks = {
            {enemy = "Wendigo", count = 1}
        },
        totalKills = 1,
        sequence = function()
            local backpack = player:WaitForChild("Backpack")
            local inputEvent = backpack:WaitForChild("Input")
            local tagEvent = game:GetService("ReplicatedStorage"):WaitForChild("Requests"):WaitForChild("TagReplicate")
            
            inputEvent:FireServer("startchat", workspace.FriendlyNpcs.Goten)
            task.wait(0.5)
            for i = 1, 5 do
                inputEvent:FireServer("chatadvance")
                task.wait(0.5)
            end
            inputEvent:FireServer("chatadvance", "Sure")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name], {
                [""..tick()..player.Name.."slow0"] = { "slow", true, workspace.Live[player.Name], ""..tick()..player.Name.."slow0" }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "Can you help me?")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "Me and [g]Trunks[/g] like to the play in the mountains near [p]that dojo place[/p] but I can't go right now.")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "My big bro said there is some scary monster up there, and he said he'd clear them out after he got back from school. But he's still not home yet!")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "Could you take out the scary monster for me, pretty please!")
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "chat_choices", {
                No = { Messages = { "Aww man! I wanted to see [g]Trunks[/g]'s new toys..." } },
                Sure = { Completed = { GiveQuest = "Wendigo" }, Messages = { "Awesome! You're the best!" } }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "Awesome! You're the best!")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "endchat")
            task.wait(0.5)
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name])
        end
    },
    {
        name = "Victim",
        npcPath = "Victim",
        questName = "Avenge the bear attack victim",
        questId = "BearAvenge",
        tasks = {
            {enemy = "Bear", count = 5}
        },
        totalKills = 5,
        sequence = function()
            local backpack = player:WaitForChild("Backpack")
            local inputEvent = backpack:WaitForChild("Input")
            local tagEvent = game:GetService("ReplicatedStorage"):WaitForChild("Requests"):WaitForChild("TagReplicate")
            
            inputEvent:FireServer("startchat", workspace.FriendlyNpcs.Victim)
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance", "Okay")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name], {
                [""..tick()..player.Name.."slow0"] = { "slow", true, workspace.Live[player.Name], ""..tick()..player.Name.."slow0" }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "PLEASE! Avenge me!")
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "chat_choices", {
                No = { Messages = { "please.." } },
                Okay = { Completed = { AddFlag = "ShowBabyBear", GiveQuest = "BearAvenge" }, Messages = { "they're just in the woods over there... be careful.." } }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "they're just in the woods over there... be careful..")
            task.wait(0.5)
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name])
        end
    },
    {
        name = "CellJrQuest",
        npcPath = "CellJrQuest",
        questName = "Remnant Cell Jr. Clean Up!",
        questId = "CellJrCleanup",
        tasks = {
            {enemy = "Cell Jr", count = 7}
        },
        totalKills = 7,
        sequence = function()
            local backpack = player:WaitForChild("Backpack")
            local inputEvent = backpack:WaitForChild("Input")
            local tagEvent = game:GetService("ReplicatedStorage"):WaitForChild("Requests"):WaitForChild("TagReplicate")
            
            inputEvent:FireServer("startchat", workspace.FriendlyNpcs.CellJrQuest)
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance", "Yes")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name], {
                [""..tick()..player.Name.."slow0"] = { "slow", true, workspace.Live[player.Name], ""..tick()..player.Name.."slow0" }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "So I know this sounds crazy but I swear I've been seeing some [red]small blue versions of Cell[/red] in the [p]wastelands[/p] near the monument arena.")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "Y-y-you believe me right?! I-if you believe me you'll take care of them won't you?")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "Y-y-you believe me right?! I-if you believe me you'll take care of them won't you?")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "R-really?! Thank you!")
            task.wait(0.5)
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name])
        end
    },
    {
        name = "Pvp Trainer",
        npcPath = "Pvp Trainer",
        questName = "SPAR?",
        questId = "DailyTrainingQuest",
        tasks = {
            {enemy = "Player", count = 1}
        },
        totalKills = 1,
        sequence = function()
            local backpack = player:WaitForChild("Backpack")
            local inputEvent = backpack:WaitForChild("Input")
            local tagEvent = game:GetService("ReplicatedStorage"):WaitForChild("Requests"):WaitForChild("TagReplicate")
            
            inputEvent:FireServer("startchat", workspace.FriendlyNpcs["Pvp Trainer"])
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance", "Alright I guess")
            task.wait(0.5)
            inputEvent:FireServer("chatadvance", "Alright I guess")
            task.wait(0.5)
            
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name], {
                [""..tick()..player.Name.."slow0"] = { "slow", true, workspace.Live[player.Name], ""..tick()..player.Name.."slow0" }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", "I don't have any friends so I'm fighting this log. It's not working.")
            task.wait(0.5)
            firesignal(inputEvent.OnClientEvent, "readchat", "You should try fighting some peers as well and see how it goes.")
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "chat_choices", {
                ["No Freak"] = "You didn't have to be rude",
                ["Alright I guess"] = { Completed = { GiveQuest = "DailyTrainingQuest" }, Messages = { { SoundId = "rbxassetid://9116451392", Text = "Fighting friends similar to your strength is always best.", AnimationId = "rbxassetid://98106599845915" } } }
            })
            task.wait(0.5)
            
            firesignal(inputEvent.OnClientEvent, "readchat", { SoundId = "rbxassetid://9116451392", Text = "Fighting friends similar to your strength is always best.", AnimationId = "rbxassetid://98106599845915" })
            task.wait(0.5)
            firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name])
        end
    }
}

-- ===== ENEMY LIST =====
local ENEMY_LIST = {
    "All",
    "Snake","Scorpion","Black Scorpion","Red Ribbon Soldier","Red Ribbon Gunner",
    "Tank","Shielded Tank","Corrupt Officer","Thug","Brute","Kung Fu Master",
    "Android Prototype S","Android Prototype A","Android Prototype B","Chi Expert",
    "Kick Boxer","Purple Fighter","Universal Champion","Yeti","Saibaman",
    "Saibablue","Alien","Android 19","Android 20","Gorilla","Bear","Galactic Patrol",
    "Mad Scientist","Imperfect Cell","Evil Majin","Saibared","Evil Crane Student",
    "Evil Saiyan","Evil Namek","Dino","Frog","Bandit","Cell Jr","Egoist Goalie",
    "Egoist Striker","Female Bandit","Giras","Monster Carrot","Pirate Cannoneer",
    "Pirate Elite","Pirate Robot","Pirate Scrub","Pterodactyl","Punching Machine",
    "Rabbit Mobster","Rabbit Rocketeer","Sataru Dojo","Spopovich","Wendigo","Yamu",
    "The Hunter"
}

-- ===== CONFIG =====
local MONSTER_NAME = "Evil Majin"
local BEHIND_DISTANCE = 10
local HEIGHT_OFFSET = 2
local ATTACK_DELAY = 0.1

local DIST_MIN = 1
local DIST_MAX = 60

getgenv().MONSTER_NAME = getgenv().MONSTER_NAME or MONSTER_NAME
getgenv().BEHIND_DISTANCE = getgenv().BEHIND_DISTANCE or BEHIND_DISTANCE
local active = false
getgenv().ka = active

-- ===== QUEST TRACKING =====
local killCount = 0
local questProgressLabel = nil
local dailyKillCount = 0
local dailyProgressLabel = nil
local currentQuestData = nil
local currentTaskIndex = 1
local questKillCounts = {}
local questCompleted = false

-- ===== MOVEMENT CONFIG =====
local FLY_SPEED = 500
local VERTICAL_SPEED = 500
local SMOOTHING = 0.9
local flying = false
local bodyVel = nil
local keys = {W=false, A=false, S=false, D=false, Space=false, LeftShift=false}

-- ===== UTILITIES =====
local function getModelCFrame(model)
    if not model then return nil end
    if model.PrimaryPart then
        local ok, c = pcall(function() return model.PrimaryPart.CFrame end)
        if ok and c then return c end
    end
    local ok, pivot = pcall(function() if model.GetPivot then return model:GetPivot() end end)
    if ok and pivot then return pivot end
    local sum = Vector3.new()
    local count = 0
    for _, d in ipairs(model:GetDescendants()) do
        if d:IsA("BasePart") then
            sum = sum + d.Position
            count = count + 1
        end
    end
    if count == 0 then return nil end
    return CFrame.new(sum / count)
end

local function isSnakeAlive(snake)
    if not snake or not snake.Parent then return false end
    local hum = snake:FindFirstChild("Humanoid")
    if not hum then return false end
    -- Only consider truly dead (0 HP or Dead state)
    if hum.Health <= 0 then return false end
    if hum:GetState() == Enum.HumanoidStateType.Dead then return false end
    return true
end

local function findSnakes()
    local enemies = workspace:FindFirstChild("Enemies")
    if not enemies then
        warn("findSnakes: workspace.Enemies not found")
        return {}
    end
    local out = {}
    local targetName = tostring(getgenv().MONSTER_NAME or "")
    local lowTarget = targetName:lower()
    for _, child in ipairs(enemies:GetChildren()) do
        local nameToCheck = tostring(child.Name or "")
        local displayName = ""
        local hum = child:FindFirstChild("Humanoid")
        if hum and type(hum.DisplayName) == "string" then displayName = hum.DisplayName end

        local match = false
        if lowTarget == "" or lowTarget == "all" then
            match = true
        else
            if string.find(nameToCheck:lower(), lowTarget, 1, true) then
                match = true
            elseif displayName ~= "" and string.find(displayName:lower(), lowTarget, 1, true) then
                match = true
            end
        end

        if match and isSnakeAlive(child) then
            table.insert(out, child)
        end
    end
    return out
end

local function findClosestSnakeToCharacter(char)
    local snakes = findSnakes()
    if #snakes == 0 then return nil end
    local hrp = char:FindFirstChild("HumanoidRootPart") or char.PrimaryPart
    if not hrp then return snakes[1] end
    local best, bestDist
    for _, s in ipairs(snakes) do
        local cfr = getModelCFrame(s)
        if cfr then
            local d = (cfr.Position - hrp.Position).Magnitude
            if not bestDist or d < bestDist then
                bestDist = d
                best = s
            end
        end
    end
    return best or snakes[1]
end

-- ===== ATTACK =====
local lastAttackTime = 0
local function attackCharacter(char)
    if not char then return end
    local currentTime = tick()
    if currentTime - lastAttackTime < ATTACK_DELAY then return end
    lastAttackTime = currentTime

    pcall(function()
        if VirtualInputManager and VirtualInputManager.SendMouseButtonEvent then
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
        end
    end)

    pcall(function()
        local clashEvent = char:FindFirstChild("clashEvent")
        if clashEvent then clashEvent:FireServer() end
    end)

    pcall(function()
        local tool = char:FindFirstChildOfClass("Tool")
        if tool then tool:Activate() end
    end)
end

-- ===== FLIGHT FUNCTIONS =====
local function createBodyVel(hrp)
    if not hrp then return nil end
    local existing = hrp:FindFirstChild("JomFSRBodyVel")
    if existing and existing:IsA("BodyVelocity") then
        return existing
    end
    local bv = Instance.new("BodyVelocity")
    bv.Name = "JomFSRBodyVel"
    bv.MaxForce = Vector3.new(100000, 100000, 100000)
    bv.P = 1250
    bv.Velocity = Vector3.new(0, 0, 0)
    bv.Parent = hrp
    return bv
end

local function enableFly()
    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    
    bodyVel = createBodyVel(hrp)
    flying = true
    print("Flight enabled!")
end

local function disableFly()
    flying = false
    if bodyVel then
        pcall(function() bodyVel:Destroy() end)
        bodyVel = nil
    end
    local char = player.Character
    if char then
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if hrp then
            local bv = hrp:FindFirstChild("JomFSRBodyVel")
            if bv then pcall(function() bv:Destroy() end) end
            pcall(function() hrp.AssemblyLinearVelocity = Vector3.zero end)
        end
    end
    print("Flight disabled!")
end

-- Keyboard controls for flying
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType ~= Enum.UserInputType.Keyboard then return end
    
    if input.KeyCode == Enum.KeyCode.W then keys.W = true end
    if input.KeyCode == Enum.KeyCode.S then keys.S = true end
    if input.KeyCode == Enum.KeyCode.A then keys.A = true end
    if input.KeyCode == Enum.KeyCode.D then keys.D = true end
    if input.KeyCode == Enum.KeyCode.Space then keys.Space = true end
    if input.KeyCode == Enum.KeyCode.LeftShift then keys.LeftShift = true end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType ~= Enum.UserInputType.Keyboard then return end
    
    if input.KeyCode == Enum.KeyCode.W then keys.W = false end
    if input.KeyCode == Enum.KeyCode.S then keys.S = false end
    if input.KeyCode == Enum.KeyCode.A then keys.A = false end
    if input.KeyCode == Enum.KeyCode.D then keys.D = false end
    if input.KeyCode == Enum.KeyCode.Space then keys.Space = false end
    if input.KeyCode == Enum.KeyCode.LeftShift then keys.LeftShift = false end
end)

-- Flight movement loop
RunService.Heartbeat:Connect(function(dt)
    if not flying then return end
    
    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp or not bodyVel then return end
    
    local cam = workspace.CurrentCamera
    if not cam then return end

    -- Calculate camera-relative movement
    local camLook = cam.CFrame.LookVector
    camLook = Vector3.new(camLook.X, 0, camLook.Z)
    if camLook.Magnitude > 0 then 
        camLook = camLook.Unit 
    else 
        camLook = Vector3.new(0, 0, -1) 
    end

    local camRight = cam.CFrame.RightVector
    camRight = Vector3.new(camRight.X, 0, camRight.Z)
    if camRight.Magnitude > 0 then 
        camRight = camRight.Unit 
    else 
        camRight = Vector3.new(1, 0, 0) 
    end

    local moveDir = Vector3.new(0, 0, 0)
    if keys.W then moveDir = moveDir + camLook end
    if keys.S then moveDir = moveDir - camLook end
    if keys.D then moveDir = moveDir + camRight end
    if keys.A then moveDir = moveDir - camRight end
    if keys.Space then moveDir = moveDir + Vector3.new(0, 1, 0) end
    if keys.LeftShift then moveDir = moveDir - Vector3.new(0, 1, 0) end

    local vel = Vector3.new(0, 0, 0)
    if moveDir.Magnitude > 0.0001 then
        vel = moveDir.Unit * FLY_SPEED
    end

    if bodyVel then
        bodyVel.Velocity = vel
    end
end)

-- Respawn handler
player.CharacterAdded:Connect(function(char)
    task.wait(0.5)
    if flying then
        local hrp = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart", 2)
        if hrp then
            bodyVel = createBodyVel(hrp)
        end
    end
end)

-- ===== MAIN LOOP =====
local currentTarget = nil
RunService.Heartbeat:Connect(function()
    if not active then
        pcall(function()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = player.Character.HumanoidRootPart
                hrp.Anchored = false
                local hum = player.Character:FindFirstChild("Humanoid")
                if hum then hum.PlatformStand = false; hum.AutoRotate = true end
            end
        end)
        return
    end

    -- Check if quest is completed
    if currentQuestData and type(checkQuestCompletion) == "function" and checkQuestCompletion() then
        print("âœ“ Quest completed! The game will automatically give rewards.")
        api.stop()
        currentQuestData = nil
        questCompleted = true
        print("Farm stopped. You can start a new quest now.")
        return
    end

    pcall(function()
        local char = player.Character
        if not char then return end
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        local hum = char:FindFirstChild("Humanoid")

        -- Check if we need to switch enemy types for quest
        if currentQuestData and not questCompleted and type(getCurrentTargetEnemy) == "function" then
            local currentEnemy = getCurrentTargetEnemy()
            if currentEnemy and getgenv().MONSTER_NAME ~= currentEnemy then
                getgenv().MONSTER_NAME = currentEnemy
                currentTarget = nil
                print("Switching to enemy type:", currentEnemy)
            elseif not currentEnemy and not questCompleted then
                -- No more enemies to target, quest should be complete
                questCompleted = true
                print("No more enemies to target, quest completed!")
            end
        end

        if currentTarget and not isSnakeAlive(currentTarget) then
            currentTarget = nil
            print("Target died, searching for new target...")
        end

        -- If we have a valid current target, stick with it until it's dead
        local target
        if currentTarget and isSnakeAlive(currentTarget) then
            target = currentTarget
        else
            -- When a quest is active, only target quest enemies
            target = findClosestSnakeToCharacter(char)
        end
        
        if not target then currentTarget = nil; return end
        if not isSnakeAlive(target) then currentTarget = nil; return end
        
        -- Extra check: If quest is active, verify target matches quest requirement
        if currentQuestData and not questCompleted then
            local requiredEnemy = getgenv().MONSTER_NAME
            if requiredEnemy then
                -- Use the same matching logic as findSnakes
                local targetName = target.Name
                local hum = target:FindFirstChild("Humanoid")
                local displayName = ""
                if hum and type(hum.DisplayName) == "string" then 
                    displayName = hum.DisplayName 
                end
                
                local lowTarget = requiredEnemy:lower()
                local nameMatches = string.find(targetName:lower(), lowTarget, 1, true)
                local displayMatches = (displayName ~= "") and string.find(displayName:lower(), lowTarget, 1, true)
                
                if not nameMatches and not displayMatches then
                    -- This target doesn't match quest requirement, skip it
                    return
                end
            end
        end

        if currentTarget ~= target then
            currentTarget = target
            print("New Target Locked:", target.Name)
        end

        local targetCFrame = getModelCFrame(target)
        if not targetCFrame then return end

        local dist = (type(getgenv().BEHIND_DISTANCE) == "number" and getgenv().BEHIND_DISTANCE) or BEHIND_DISTANCE
        local snakeLookVector = targetCFrame.LookVector
        local behindPosition = targetCFrame.Position - (snakeLookVector * dist)
        behindPosition = behindPosition + Vector3.new(0, HEIGHT_OFFSET, 0)
        local faceSnakeBack = CFrame.new(behindPosition, behindPosition + snakeLookVector)

        hrp.CFrame = faceSnakeBack

        hrp.Velocity = Vector3.new(0,0,0)
        pcall(function() hrp.AssemblyLinearVelocity = Vector3.new(0,0,0) end)
        pcall(function() hrp.AssemblyAngularVelocity = Vector3.new(0,0,0) end)
        pcall(function() hrp.RotVelocity = Vector3.new(0,0,0) end)

        if hum then hum.AutoRotate = false end

        attackCharacter(char)
    end)
end)

-- ===== PUBLIC API =====
local api = {}
function api.start()
    active = true
    getgenv().ka = true
    print("Farm started!")
end
function api.stop()
    active = false
    getgenv().ka = false
    pcall(function()
        if player.Character then
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            local hum = player.Character:FindFirstChild("Humanoid")
            if hrp then hrp.Anchored = false end
            if hum then hum.PlatformStand = false; hum.AutoRotate = true end
        end
    end)
    print("Farm stopped!")
end
function api.setDistance(value)
    BEHIND_DISTANCE = tonumber(value) or BEHIND_DISTANCE
    getgenv().BEHIND_DISTANCE = BEHIND_DISTANCE
    print("Behind distance set to:", BEHIND_DISTANCE)
end
function api.setHeight(value)
    HEIGHT_OFFSET = value
    print("Height offset set to:", value)
end
function api.setMonsterName(name)
    if type(name) ~= "string" then error("setMonsterName expects a string") end
    MONSTER_NAME = name
    getgenv().MONSTER_NAME = name
    currentTarget = nil
    print("Monster name changed to:", name)
end

getgenv().TeleportSnake = api
_G.TeleportSnake = getgenv().TeleportSnake

-- ===== TELEPORT TO NPC =====
local function teleportToNPC(npcModel)
    if not npcModel or not npcModel.Parent then
        warn("NPC not found in workspace!")
        return
    end
    
    local char = player.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    
    local npcCFrame = getModelCFrame(npcModel)
    if npcCFrame then
        hrp.CFrame = npcCFrame + Vector3.new(0, 3, 5)
        print("Teleported to:", npcModel.Name)
    else
        warn("Could not get CFrame for NPC:", npcModel.Name)
    end
end

-- ===== NEW QUEST SYSTEM =====
local function parseQuestProgress(questText)
    -- Parse quest text to extract progress information
    -- Example: "Defeat Saibablues 0" (completed) or "Defeat Saibamans 20" (remaining)
    local progress = {}
    
    print("Parsing quest text: " .. tostring(questText))
    
    -- Look for patterns like "Defeat [Enemy] [Number]"
    for enemyName, count in string.gmatch(questText, "Defeat ([%w%s]+)%s*(%d+)") do
        enemyName = enemyName:gsub("^%s*(.-)%s*$", "%1") -- trim whitespace
        local numCount = tonumber(count)
        if numCount then
            progress[enemyName] = {
                remaining = numCount,
                completed = numCount == 0
            }
            print("Parsed: " .. enemyName .. " = " .. numCount .. " remaining")
        end
    end
    
    -- Also try to parse if the text contains multiple lines or different format
    if not next(progress) then
        -- Try alternative parsing methods
        for line in string.gmatch(questText, "[^\r\n]+") do
            for enemyName, count in string.gmatch(line, "Defeat ([%w%s]+)%s*(%d+)") do
                enemyName = enemyName:gsub("^%s*(.-)%s*$", "%1")
                local numCount = tonumber(count)
                if numCount then
                    progress[enemyName] = {
                        remaining = numCount,
                        completed = numCount == 0
                    }
                    print("Parsed (alt): " .. enemyName .. " = " .. numCount .. " remaining")
                end
            end
        end
    end
    
    return progress
end

local function readCurrentQuest()
    print("Attempting to read current quest...")
    
    local questFound = false
    local activeQuests = {}
    
    -- Method 1: Look for quest UI in PlayerGui (based on decompiled code)
    local playerGui = player:FindFirstChildOfClass("PlayerGui")
    if playerGui then
        print("=== SCANNING PLAYERGUI FOR QUEST DATA ===")
        
        -- First, let's find ALL UIs that might contain quests
        for _, guiChild in ipairs(playerGui:GetChildren()) do
            print("\nFound UI: " .. guiChild.Name .. " (" .. guiChild.ClassName .. ")")
            if guiChild:IsA("ScreenGui") or guiChild:IsA("Frame") then
                -- Look for TextLabels that might contain quest info
                for _, descendant in ipairs(guiChild:GetDescendants()) do
                    if descendant:IsA("TextLabel") and descendant.Text ~= "" then
                        -- Check if text might be quest-related
                        local text = descendant.Text
                        if string.find(text:lower(), "saiba") or string.find(text:lower(), "defeat") or 
                           string.find(text:lower(), "quest") or string.find(text:lower(), "daily") then
                            print("  POTENTIAL QUEST TEXT: " .. text)
                            print("    Path: " .. descendant:GetFullName())
                        end
                    end
                end
            end
        end
        
        -- Look for quest UI in HUD.QuestHUD (this is where quest data actually is)
        local hud = playerGui:FindFirstChild("HUD")
        local questUI = nil
        if hud then
            questUI = hud:FindFirstChild("QuestHUD")
        end
        
        if not questUI then
            -- Fallback: Search for QuestUI, Quest, or QuestFrame
            questUI = playerGui:FindFirstChild("QuestUI") or playerGui:FindFirstChild("Quest") or playerGui:FindFirstChild("QuestFrame")
        end
        
        if not questUI then
            -- Last resort: Search for any UI with ScrollingFrame that might contain quests
            for _, child in ipairs(playerGui:GetDescendants()) do
                if child:IsA("ScrollingFrame") and child.Visible and child.Name == "ScrollingFrame" then
                    -- Check if this ScrollingFrame contains quest data
                    local parentName = child.Parent.Name
                    if string.find(parentName:lower(), "quest") then
                        questUI = child.Parent
                        break
                    end
                end
            end
        end
        
        if questUI then
            print("Found quest UI: " .. questUI.Name .. " (Path: " .. questUI:GetFullName() .. ")")
            local scrollingFrame = questUI:FindFirstChild("ScrollingFrame")
            if scrollingFrame then
                print("Found quest ScrollingFrame with " .. #scrollingFrame:GetChildren() .. " children")
                
                -- Read each quest frame
                for _, questFrame in ipairs(scrollingFrame:GetChildren()) do
                    -- Only process GUI objects - skip scripts and layouts
                    if questFrame:IsA("GuiObject") then
                        -- Safely get visibility info
                        local visible = "N/A"
                        pcall(function()
                            visible = tostring(questFrame.Visible)
                        end)
                        print("  Child: " .. questFrame.Name .. " (Type: " .. questFrame.ClassName .. ", Visible: " .. visible .. ")")
                        
                        print("    Frame details:")
                        print("      - Visible: " .. tostring(questFrame.Visible))
                        print("      - Children count: " .. #questFrame:GetChildren())
                        
                        -- List all children of the frame
                        for _, child in ipairs(questFrame:GetChildren()) do
                            print("      - Child: " .. child.Name .. " (" .. child.ClassName .. ")")
                            if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
                                print("        Text: " .. tostring(child.Text))
                            end
                        end
                        
                        -- Check for QuestText specifically
                        local questText = questFrame:FindFirstChild("QuestText")
                        if questText and questText.Text ~= "" then
                            print("âœ“ Found QuestText: " .. questText.Text)
                            
                            -- Try to read progress from QuestNum (shows REMAINING kills)
                            local questNum = questFrame:FindFirstChild("QuestNum")
                            local remainingKills = 0
                            
                            if questNum and questNum.Text ~= "" then
                                local numText = questNum.Text
                                if string.find(numText, "/") then
                                    -- Format: "0/20" - parse both numbers
                                    local remaining, max = string.match(numText, "^(%d+)/(%d+)$")
                                    remainingKills = tonumber(remaining) or 0
                                else
                                    -- Format: "20" or "0" - just the remaining count
                                    remainingKills = tonumber(numText) or 0
                                end
                            end
                            
                            print("  QuestNum (remaining kills): " .. remainingKills)
                            
                            local questInfo = {
                                text = questText.Text,
                                timeLimit = questFrame:GetAttribute("TimeLimit"),
                                frame = questFrame,
                                progress = {
                                    remaining = remainingKills, -- Store remaining, not completed
                                    text = questText.Text,
                                    frameName = questFrame.Name -- Store frame name to match with enemy
                                }
                            }
                            table.insert(activeQuests, questInfo)
                            print("Found quest: " .. questText.Text .. " (remaining: " .. remainingKills .. ")")
                            if questInfo.timeLimit then
                                print("  Time limit: " .. questInfo.timeLimit)
                            end
                            questFound = true
                        else
                            -- Try to find any text label that might contain quest info
                            for _, child in ipairs(questFrame:GetChildren()) do
                                if child:IsA("TextLabel") and child.Text ~= "" then
                                    -- Skip UI elements like "0/20" counter text
                                    if not string.match(child.Text, "^%d+/%d+$") and not string.match(child.Text, "^%d+$") then
                                        print("    Found TextLabel: " .. child.Text)
                                        -- This might be quest text
                                        local questInfo = {
                                            text = child.Text,
                                            timeLimit = questFrame:GetAttribute("TimeLimit"),
                                            frame = questFrame,
                                            progress = parseQuestProgress(child.Text)
                                        }
                                        table.insert(activeQuests, questInfo)
                                        print("Found quest: " .. child.Text)
                                        questFound = true
                                    end
                                end
                            end
                        end
                    else
                        print("  Skipping non-GUI child: " .. questFrame.Name .. " (" .. questFrame.ClassName .. ")")
                    end
                end
            end
        end
    end
    
    -- Method 2: Look for quest data in player attributes
    local char = player.Character
    if char then
        for _, attr in ipairs(char:GetAttributes()) do
            if string.find(attr:lower(), "quest") or string.find(attr:lower(), "daily") then
                print("Found quest attribute: " .. attr .. " = " .. tostring(char:GetAttribute(attr)))
                questFound = true
            end
        end
    end
    
    -- Method 3: Look for quest data in ReplicatedStorage
    local replicatedStorage = game:GetService("ReplicatedStorage")
    if replicatedStorage then
        local questData = replicatedStorage:FindFirstChild("QuestData") or replicatedStorage:FindFirstChild("Quests")
        if questData then
            print("Found quest data in ReplicatedStorage: " .. questData.Name)
            questFound = true
        end
    end
    
    -- Method 4: Check for quest-related RemoteEvents
    local questEvents = {}
    for _, child in ipairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
        if child:IsA("RemoteEvent") and (string.find(child.Name:lower(), "quest") or string.find(child.Name:lower(), "daily")) then
            table.insert(questEvents, child.Name)
            questFound = true
        end
    end
    
    if #questEvents > 0 then
        print("Found quest-related events: " .. table.concat(questEvents, ", "))
    end
    
    -- Summary
    if #activeQuests > 0 then
        print("=== ACTIVE QUESTS FOUND ===")
        for i, quest in ipairs(activeQuests) do
            print(i .. ". " .. quest.text)
            if quest.timeLimit then
                print("   Time Limit: " .. quest.timeLimit)
            end
        end
        print("=========================")
    elseif not questFound then
        print("No quest data found. This could mean:")
        print("1. No quest is currently active")
        print("2. Quest UI is not visible")
        print("3. Quest data is stored in a different location")
        print("Try starting a quest manually first, then use this button again.")
    end
    
    return questFound, activeQuests
end

local function matchQuestWithData(questText)
    -- Try to match the quest text with our predefined quest data
    local questTextLower = questText:lower()
    print("Matching quest text: " .. questText)
    
    for npcName, questData in pairs(DAILY_QUEST_NPCS) do
        print("Checking against quest: " .. questData.questName)
        
        -- Check if quest name matches
        if string.find(questTextLower, questData.questName:lower(), 1, true) then
            print("Matched by quest name: " .. questData.questName)
            return questData
        end
        
        -- Check if quest ID matches
        if questData.questId and string.find(questTextLower, questData.questId:lower(), 1, true) then
            print("Matched by quest ID: " .. questData.questId)
            return questData
        end
        
        -- Check if enemy names match
        for _, task in ipairs(questData.tasks) do
            if string.find(questTextLower, task.enemy:lower(), 1, true) then
                print("Matched by enemy name: " .. task.enemy)
                return questData
            end
        end
    end
    
    print("No matching quest data found")
    return nil
end

local function autoDetectAndStartQuest()
    local questFound, activeQuests = readCurrentQuest()
    
    if #activeQuests > 0 then
        print("Attempting to auto-detect and start quest...")
        
        -- Find all quest tasks and group them by quest
        local questProgressMap = {} -- {questName = {taskProgress}}
        
        for _, quest in ipairs(activeQuests) do
            -- Skip reward displays and template frames
            if not string.find(quest.text, "Rewards:") and quest.text ~= "" then
                local matchedQuest = matchQuestWithData(quest.text)
                if matchedQuest then
                    print("Matched quest: " .. quest.text .. " -> " .. matchedQuest.questName)
                    
                    -- Store progress for this task
                    if not questProgressMap[matchedQuest.questName] then
                        questProgressMap[matchedQuest.questName] = {}
                    end
                    
                    -- Extract enemy name from quest text (e.g., "Defeat Saibablues" -> "Saibablue")
                    local enemyText = quest.text:gsub("^Defeat%s*", ""):gsub("^Kill%s*", ""):gsub("s$", "")
                    questProgressMap[matchedQuest.questName][enemyText] = quest.progress
                end
            end
        end
        
        -- Now process each matched quest
        for questName, taskProgress in pairs(questProgressMap) do
            -- Find the quest data again
            local matchedQuest = nil
            for _, questData in pairs(DAILY_QUEST_NPCS) do
                if questData.questName == questName then
                    matchedQuest = questData
                    break
                end
            end
            
            if matchedQuest then
                -- Check if matchedQuest has tasks
                if not matchedQuest.tasks then
                    print("ERROR: matchedQuest.tasks is nil!")
                    print("Matched quest data:", matchedQuest)
                    return false
                end
                
                print("Loading progress for quest: " .. questName)
                -- Initialize with saved progress
                if type(initializeQuest) == "function" then
                    -- Convert taskProgress map to array format for initializeQuest
                    initializeQuest(matchedQuest, taskProgress)
                else
                    print("ERROR: initializeQuest is not a function!")
                    return false
                end
                
                if type(getCurrentTargetEnemy) == "function" then
                    local currentEnemy = getCurrentTargetEnemy()
                    if currentEnemy then
                        getgenv().MONSTER_NAME = currentEnemy
                        api.start()
                        print("Auto-started quest: " .. matchedQuest.questName .. " - Targeting: " .. currentEnemy)
                        return true
                    else
                        print("Quest appears to be completed!")
                        return true
                    end
                else
                    print("ERROR: getCurrentTargetEnemy is not a function!")
                    return false
                end
            end
        end
        
        -- Return true if we started at least one quest
        return false
    else
        print("No active quests found")
    end
    
    return false
end

local function initializeQuest(questData, savedProgress)
    currentQuestData = questData
    currentTaskIndex = 1
    questKillCounts = {}
    questCompleted = false
    
    -- Initialize kill counts for each task from saved progress
    -- savedProgress format: {[enemyName] = {remaining=X, text="...", frameName="..."}}
    for i, task in ipairs(questData.tasks) do
        local enemyName = task.enemy
        local requiredKills = task.count
        questKillCounts[enemyName] = 0 -- Initialize to 0
    end
    
    -- Now load progress from saved data (matching by enemy name from quest text)
    -- savedProgress format: {[enemyName] = {remaining=X, text="...", frameName="..."}}
    if savedProgress then
        print("Loading saved progress data...")
        -- Iterate through each saved task progress
        for enemyKey, taskProg in pairs(savedProgress) do
            print("Checking enemy: " .. tostring(enemyKey) .. ", type: " .. type(taskProg))
            
            if type(taskProg) == "table" and taskProg.remaining and taskProg.text then
                -- Extract enemy name from quest text (e.g., "Defeat Saibablues" -> "Saibablue")
                local enemyFromText = taskProg.text:gsub("^Defeat%s*", ""):gsub("^Kill%s*", ""):gsub("s$", "")
                
                -- Match with quest tasks
                for _, task in ipairs(questData.tasks) do
                    local enemyName = task.enemy
                    local requiredKills = task.count
                    
                    -- Check if this matches (handle plural forms)
                    if enemyFromText == enemyName or enemyFromText == enemyName .. "s" then
                        -- Calculate kills completed: required - remaining
                        local remaining = taskProg.remaining
                        local killsCompleted = requiredKills - remaining
                        questKillCounts[enemyName] = math.max(0, math.min(killsCompleted, requiredKills))
                        
                        print("Loaded progress for " .. enemyName .. ": " .. questKillCounts[enemyName] .. "/" .. requiredKills .. " (remaining: " .. remaining .. ")")
                        break
                    end
                end
            end
        end
    end
    
    -- Find the first incomplete task
    for i, task in ipairs(questData.tasks) do
        local enemyName = task.enemy
        local requiredKills = task.count
        local currentKills = questKillCounts[enemyName] or 0
        
        if currentKills < requiredKills then
            currentTaskIndex = i
            print("Starting from task " .. i .. ": " .. enemyName .. " (" .. currentKills .. "/" .. requiredKills .. ")")
            break
        end
    end
    
    print("Quest initialized: " .. questData.questName)
    print("Tasks: " .. #questData.tasks .. " enemy types to defeat")
end

local function getCurrentTargetEnemy()
    if not currentQuestData or questCompleted then return nil end
    
    -- Check if we're done with all tasks
    if currentTaskIndex > #currentQuestData.tasks then
        questCompleted = true
        print("All tasks completed!")
        return nil
    end
    
    local currentTask = currentQuestData.tasks[currentTaskIndex]
    if not currentTask then
        questCompleted = true
        print("Invalid task index, quest completed!")
        return nil
    end
    
    local currentKills = questKillCounts[currentTask.enemy] or 0
    local requiredKills = currentTask.count
    
    -- Check if current task is complete
    if currentKills >= requiredKills then
        print("Completed " .. currentTask.enemy .. " task: " .. currentKills .. "/" .. requiredKills)
        currentTaskIndex = currentTaskIndex + 1
        
        -- Check if there are more tasks
        if currentTaskIndex > #currentQuestData.tasks then
            questCompleted = true
            print("All tasks completed!")
            return nil
        end
        
        -- Get next task
        local nextTask = currentQuestData.tasks[currentTaskIndex]
        print("Switching to next task: " .. nextTask.enemy .. " (" .. nextTask.count .. " required)")
        return nextTask.enemy
    end
    
    return currentTask.enemy
end

local function checkQuestCompletion()
    if not currentQuestData then return false end
    
    -- Check each task individually to ensure all are complete
    for _, task in ipairs(currentQuestData.tasks) do
        local enemyName = task.enemy
        local requiredKills = task.count
        local currentKills = questKillCounts[enemyName] or 0
        
        print("Checking task: " .. enemyName .. " (" .. currentKills .. "/" .. requiredKills .. ")")
        
        if currentKills < requiredKills then
            -- This task is not complete yet
            return false
        end
    end
    
    -- All tasks are complete
    questCompleted = true
    print("All tasks verified complete!")
    return true
end

local function updateQuestProgress(enemyName)
    if not currentQuestData or not questKillCounts[enemyName] then 
        print("WARNING: updateQuestProgress called but no quest data or kill counter for: " .. tostring(enemyName))
        return 
    end
    
    questKillCounts[enemyName] = questKillCounts[enemyName] + 1
    
    -- Find which task this enemy belongs to
    local currentTask = currentQuestData.tasks[currentTaskIndex]
    if currentTask and currentTask.enemy == enemyName then
        local currentKills = questKillCounts[enemyName]
        local requiredKills = currentTask.count
        print("Quest progress: " .. enemyName .. " " .. currentKills .. "/" .. requiredKills)
        
        if currentKills >= requiredKills then
            print("Completed " .. enemyName .. " task: " .. currentKills .. "/" .. requiredKills)
        end
    end
end

-- ===== QUEST FUNCTIONS =====
local function startChichiQuest(questStatusLabel)
    local backpack = player:WaitForChild("Backpack")
    local inputEvent = backpack:WaitForChild("Input")
    local tagEvent = game:GetService("ReplicatedStorage"):WaitForChild("Requests"):WaitForChild("TagReplicate")
    
    if questStatusLabel then
        questStatusLabel.Text = "Status: Starting Chichi Quest..."
    end
    
    local chichi = workspace.FriendlyNpcs:FindFirstChild("Chichi")
    if not chichi then
        if questStatusLabel then
            questStatusLabel.Text = "Status: Error - Chichi not found!"
        end
        return
    end

    teleportToNPC(chichi)
    task.wait(1)
    
    if inputEvent and tagEvent then
        inputEvent:FireServer("startchat", workspace.FriendlyNpcs.Chichi)
        task.wait(0.5)
        
        firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name], {
            [""..tick()..player.Name.."slow0"] = { "slow", true, workspace.Live[player.Name], ""..tick()..player.Name.."slow0" }
        })
        task.wait(0.5)
        
        firesignal(inputEvent.OnClientEvent, "readchat", "Could you get rid of them for me?")
        task.wait(0.5)
        inputEvent:FireServer("chatadvance")
        task.wait(0.5)
        
        firesignal(inputEvent.OnClientEvent, "chat_choices", {
            No = {
                Messages = { "Fine, I'll take care of it myself! No reptiles are touching a hair on my boys' head!" }
            },
            Yeah = {
                Completed = {
                    GiveQuest = "BigSnakeDaily"
                },
                Messages = { "Thanks!" }
            }
        })
        task.wait(0.5)
        
        inputEvent:FireServer("chatadvance", "Yeah")
        task.wait(0.5)
        
        firesignal(inputEvent.OnClientEvent, "readchat", "Thanks!")
        task.wait(0.5)
        inputEvent:FireServer("chatadvance")
        task.wait(0.5)
        
        firesignal(tagEvent.OnClientEvent, workspace.Live[player.Name])
        task.wait(0.5)
        firesignal(inputEvent.OnClientEvent, "endchat")
        
        getgenv().MONSTER_NAME = "Big Snake"
        killCount = 0
        if questStatusLabel then
            questStatusLabel.Text = "Status: Farming Big Snakes..."
        end
        api.start()
        
        print("Chichi quest started, targeting Big Snakes")
    end
end

-- ===== DAILY QUEST FUNCTIONS =====
local function startDailyQuest(questData, statusLabel, progressLabel)
    if statusLabel then
        statusLabel.Text = "Status: Starting " .. questData.questName .. "..."
    end
    
    local npc = workspace.FriendlyNpcs:FindFirstChild(questData.npcPath)
    if not npc then
        if statusLabel then
            statusLabel.Text = "Status: Error - " .. questData.name .. " not found!"
        end
        return
    end
    
    teleportToNPC(npc)
    task.wait(1)
    questData.sequence()
    
    if #questData.tasks > 0 then
        -- Try to read current quest progress first
        local questFound, activeQuests = readCurrentQuest()
        local savedProgress = {}
        
        if #activeQuests > 0 then
            -- Build savedProgress map from multiple quests
            for _, quest in ipairs(activeQuests) do
                local matchedQuest = matchQuestWithData(quest.text)
                if matchedQuest and matchedQuest.questName == questData.questName then
                    -- Extract enemy name from quest text
                    local enemyText = quest.text:gsub("^Defeat%s*", ""):gsub("^Kill%s*", ""):gsub("s$", "")
                    savedProgress[enemyText] = quest.progress
                    print("Found saved progress for: " .. enemyText .. " (remaining: " .. (quest.progress.remaining or 0) .. ")")
                end
            end
        end
        
        -- Initialize quest data with saved progress
        initializeQuest(questData, savedProgress)
        
        -- Get first enemy to target
        local currentEnemy = getCurrentTargetEnemy()
        if currentEnemy then
            getgenv().MONSTER_NAME = currentEnemy
            dailyKillCount = 0
            
            -- Update status display
            if statusLabel then
                local currentTask = questData.tasks[currentTaskIndex]
                statusLabel.Text = "Status: Farming " .. currentEnemy .. " (" .. (questKillCounts[currentEnemy] or 0) .. "/" .. currentTask.count .. ")"
            end
            
            if progressLabel then
                local totalKilled = 0
                for _, count in pairs(questKillCounts) do
                    totalKilled = totalKilled + count
                end
                progressLabel.Text = "Progress: " .. totalKilled .. "/" .. questData.totalKills
            end
            
            api.start()
            print("Daily quest started:", questData.questName, "- Targeting:", currentEnemy)
        else
            print("Quest appears to be completed!")
            if statusLabel then
                statusLabel.Text = "Status: Quest completed!"
            end
        end
    end
end

-- Monitor enemy deaths for quest progress
workspace.Enemies.ChildRemoved:Connect(function(enemy)
    if enemy.Name == "Big Snake" and active and getgenv().MONSTER_NAME == "Big Snake" then
        killCount = killCount + 1
        if questProgressLabel then
            questProgressLabel.Text = string.format("Big Snakes Killed: %d/10", killCount)
        end
        if killCount >= 10 then
            if questProgressLabel then
                questProgressLabel.Text = "Quest Completed! (10/10)"
            end
        end
    end
    
    -- Daily quest tracking with new system
    if active and currentQuestData and dailyProgressLabel then
        local enemyName = enemy.Name
        local currentTarget = getgenv().MONSTER_NAME
        
        -- Check if this enemy is part of our current quest
        if enemyName == currentTarget and questKillCounts[enemyName] then
            -- Update quest progress
            if type(updateQuestProgress) == "function" then
                updateQuestProgress(enemyName)
            end
            
            -- Update progress display
            local totalKilled = 0
            for _, count in pairs(questKillCounts) do
                totalKilled = totalKilled + count
            end
            dailyProgressLabel.Text = "Progress: " .. totalKilled .. "/" .. currentQuestData.totalKills
            
            -- Check if we need to switch to next enemy type
            if type(getCurrentTargetEnemy) == "function" then
                local nextEnemy = getCurrentTargetEnemy()
                if nextEnemy and nextEnemy ~= currentTarget then
                    getgenv().MONSTER_NAME = nextEnemy
                    print("Switched to next enemy type: " .. nextEnemy)
                end
            end
            
            -- Check if quest is complete
            if type(checkQuestCompletion) == "function" and checkQuestCompletion() then
                dailyProgressLabel.Text = "Quest Completed! (" .. totalKilled .. "/" .. currentQuestData.totalKills .. ")"
                print("âœ“ Quest completed! Rewards will be given automatically by the game.")
                
                -- Stop farming - game automatically completes and gives rewards
                api.stop()
                
                -- Clear quest data
                currentQuestData = nil
                questCompleted = true
                
                print("Farm stopped. You can start a new quest now.")
            end
        end
    end
end)

-- ===== SLIDER HELPER FUNCTION =====
local function createSlider(parent, config)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(1, 0, 0, 70)
    sliderFrame.BackgroundColor3 = Color3.fromRGB(48,50,52)
    sliderFrame.Parent = parent
    Instance.new("UICorner", sliderFrame).CornerRadius = UDim.new(0,6)

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -20, 0, 24)
    label.Position = UDim2.new(0, 10, 0, 8)
    label.Text = config.Name or "Slider"
    label.Font = Enum.Font.SourceSansSemibold
    label.TextSize = 14
    label.TextColor3 = Color3.fromRGB(220,220,220)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Parent = sliderFrame

    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0, 100, 0, 24)
    valueLabel.Position = UDim2.new(1, -110, 0, 8)
    valueLabel.Text = tostring(config.Default or 0)
    valueLabel.Font = Enum.Font.SourceSans
    valueLabel.TextSize = 14
    valueLabel.TextColor3 = Color3.fromRGB(150,200,255)
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.BackgroundTransparency = 1
    valueLabel.Parent = sliderFrame

    local sliderBg = Instance.new("Frame")
    sliderBg.Size = UDim2.new(1, -20, 0, 8)
    sliderBg.Position = UDim2.new(0, 10, 0, 42)
    sliderBg.BackgroundColor3 = Color3.fromRGB(38,40,42)
    sliderBg.BorderSizePixel = 0
    sliderBg.Parent = sliderFrame
    Instance.new("UICorner", sliderBg).CornerRadius = UDim.new(0,4)

    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new(0, 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(70,140,200)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBg
    Instance.new("UICorner", sliderFill).CornerRadius = UDim.new(0,4)

    local sliderKnob = Instance.new("Frame")
    sliderKnob.Size = UDim2.new(0, 16, 0, 16)
    sliderKnob.Position = UDim2.new(0, -8, 0.5, -8)
    sliderKnob.BackgroundColor3 = Color3.fromRGB(100,180,255)
    sliderKnob.BorderSizePixel = 0
    sliderKnob.Parent = sliderBg
    Instance.new("UICorner", sliderKnob).CornerRadius = UDim.new(1, 0)

    local minValue = config.Min or 0
    local maxValue = config.Max or 100
    local currentValue = config.Default or minValue
    local suffix = config.Suffix or ""

    local function updateSlider(value)
        value = math.clamp(value, minValue, maxValue)
        currentValue = value
        
        local percent = (value - minValue) / (maxValue - minValue)
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        sliderKnob.Position = UDim2.new(percent, -8, 0.5, -8)
        valueLabel.Text = tostring(math.floor(value)) .. suffix
        
        if config.Callback then
            config.Callback(value)
        end
    end

    local dragging = false
    sliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            local mousePos = UserInputService:GetMouseLocation().X
            local relativePos = (mousePos - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X
            local newValue = minValue + (relativePos * (maxValue - minValue))
            updateSlider(newValue)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = UserInputService:GetMouseLocation().X
            local relativePos = (mousePos - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X
            local newValue = minValue + (relativePos * (maxValue - minValue))
            updateSlider(newValue)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)

    updateSlider(currentValue)
    
    return {
        Frame = sliderFrame,
        Set = updateSlider,
        Get = function() return currentValue end
    }
end

-- ===== UI =====
local function createUI()
    local PlayerGui = player:FindFirstChildOfClass("PlayerGui")
    if not PlayerGui then warn("PlayerGui not found; UI not created"); return end

    local EXIST = PlayerGui:FindFirstChild("SnakeAutoFarmProUI")
    if EXIST then EXIST:Destroy() end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "SnakeAutoFarmProUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- root
    local root = Instance.new("Frame")
    root.Name = "Root"
    root.Size = UDim2.new(0, 960, 0, 560)
    root.Position = UDim2.new(0.5, -480, 0.5, -280)
    root.BackgroundColor3 = Color3.fromRGB(22,24,26)
    root.Parent = screenGui
    Instance.new("UICorner", root).CornerRadius = UDim.new(0,8)

    -- DRAG HEADER
    local headerArea = Instance.new("Frame")
    headerArea.Name = "HeaderArea"
    headerArea.Size = UDim2.new(1, 0, 0, 36)
    headerArea.Position = UDim2.new(0, 0, 0, 0)
    headerArea.BackgroundTransparency = 1
    headerArea.Parent = root

    local headerTitle = Instance.new("TextLabel")
    headerTitle.Name = "HeaderTitle"
    headerTitle.Size = UDim2.new(1, -120, 1, 0)
    headerTitle.Position = UDim2.new(0, 12, 0, 0)
    headerTitle.BackgroundTransparency = 1
    headerTitle.Text = "JomFSR HUB"
    headerTitle.Font = Enum.Font.SourceSansBold
    headerTitle.TextSize = 20
    headerTitle.TextColor3 = Color3.fromRGB(240,240,240)
    headerTitle.TextXAlignment = Enum.TextXAlignment.Left
    headerTitle.Parent = headerArea

    -- P-key toggle
    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.P then
            if UserInputService:GetFocusedTextBox() then return end
            pcall(function()
                screenGui.Enabled = not screenGui.Enabled
            end)
        end
    end)

    -- Sidebar
    local side = Instance.new("Frame")
    side.Size = UDim2.new(0, 110, 1, 0)
    side.Position = UDim2.new(0,0,0,0)
    side.BackgroundColor3 = Color3.fromRGB(24,26,28)
    side.Parent = root
    Instance.new("UICorner", side).CornerRadius = UDim.new(0,8)

    local brand = Instance.new("TextLabel")
    brand.Size = UDim2.new(1, -12, 0, 40)
    brand.Position = UDim2.new(0, 10, 0, 10)
    brand.Text = "JomFSR HUB"
    brand.Font = Enum.Font.SourceSansBold
    brand.TextSize = 13
    brand.TextColor3 = Color3.fromRGB(200,200,200)
    brand.BackgroundTransparency = 1
    brand.Parent = side

    -- Tab Buttons
    local tabBtnAutoFarm = Instance.new("TextButton")
    tabBtnAutoFarm.Name = "TabAutoFarm"
    tabBtnAutoFarm.Size = UDim2.new(1, -20, 0, 40)
    tabBtnAutoFarm.Position = UDim2.new(0,10,0,70)
    tabBtnAutoFarm.Text = "AutoFarm"
    tabBtnAutoFarm.BackgroundTransparency = 1
    tabBtnAutoFarm.Font = Enum.Font.SourceSansSemibold
    tabBtnAutoFarm.TextSize = 16
    tabBtnAutoFarm.TextColor3 = Color3.fromRGB(100,180,255)
    tabBtnAutoFarm.TextXAlignment = Enum.TextXAlignment.Left
    tabBtnAutoFarm.Parent = side

    local tabBtnQuestNPC = Instance.new("TextButton")
    tabBtnQuestNPC.Name = "TabQuestNPC"
    tabBtnQuestNPC.Size = UDim2.new(1, -20, 0, 40)
    tabBtnQuestNPC.Position = UDim2.new(0,10,0,120)
    tabBtnQuestNPC.Text = "Quest NPC"
    tabBtnQuestNPC.BackgroundTransparency = 1
    tabBtnQuestNPC.Font = Enum.Font.SourceSansSemibold
    tabBtnQuestNPC.TextSize = 16
    tabBtnQuestNPC.TextColor3 = Color3.fromRGB(150,150,150)
    tabBtnQuestNPC.TextXAlignment = Enum.TextXAlignment.Left
    tabBtnQuestNPC.Parent = side

    local tabBtnAutoQuest = Instance.new("TextButton")
    tabBtnAutoQuest.Name = "TabAutoQuest"
    tabBtnAutoQuest.Size = UDim2.new(1, -20, 0, 40)
    tabBtnAutoQuest.Position = UDim2.new(0,10,0,170)
    tabBtnAutoQuest.Text = "AutoQuest"
    tabBtnAutoQuest.BackgroundTransparency = 1
    tabBtnAutoQuest.Font = Enum.Font.SourceSansSemibold
    tabBtnAutoQuest.TextSize = 16
    tabBtnAutoQuest.TextColor3 = Color3.fromRGB(150,150,150)
    tabBtnAutoQuest.TextXAlignment = Enum.TextXAlignment.Left
    tabBtnAutoQuest.Parent = side

    local tabBtnMovement = Instance.new("TextButton")
    tabBtnMovement.Name = "TabMovement"
    tabBtnMovement.Size = UDim2.new(1, -20, 0, 40)
    tabBtnMovement.Position = UDim2.new(0,10,0,220)
    tabBtnMovement.Text = "Movement"
    tabBtnMovement.BackgroundTransparency = 1
    tabBtnMovement.Font = Enum.Font.SourceSansSemibold
    tabBtnMovement.TextSize = 16
    tabBtnMovement.TextColor3 = Color3.fromRGB(150,150,150)
    tabBtnMovement.TextXAlignment = Enum.TextXAlignment.Left
    tabBtnMovement.Parent = side

    local tabBtnDailyQuest = Instance.new("TextButton")
    tabBtnDailyQuest.Name = "TabDailyQuest"
    tabBtnDailyQuest.Size = UDim2.new(1, -20, 0, 40)
    tabBtnDailyQuest.Position = UDim2.new(0,10,0,270)
    tabBtnDailyQuest.Text = "DailyQuest"
    tabBtnDailyQuest.BackgroundTransparency = 1
    tabBtnDailyQuest.Font = Enum.Font.SourceSansSemibold
    tabBtnDailyQuest.TextSize = 16
    tabBtnDailyQuest.TextColor3 = Color3.fromRGB(150,150,150)
    tabBtnDailyQuest.TextXAlignment = Enum.TextXAlignment.Left
    tabBtnDailyQuest.Parent = side

    -- Main area
    local main = Instance.new("Frame")
    main.Size = UDim2.new(1, -120, 1, 0)
    main.Position = UDim2.new(0,110,0,0)
    main.BackgroundColor3 = Color3.fromRGB(30,33,36)
    main.Parent = root
    Instance.new("UICorner", main).CornerRadius = UDim.new(0,6)

    -- ===== AUTO FARM CONTENT =====
    local autoFarmContent = Instance.new("Frame")
    autoFarmContent.Name = "AutoFarmContent"
    autoFarmContent.Size = UDim2.new(1, 0, 1, 0)
    autoFarmContent.BackgroundTransparency = 1
    autoFarmContent.Visible = true
    autoFarmContent.Parent = main

    local header = Instance.new("TextLabel")
    header.Size = UDim2.new(1, -24, 0, 48)
    header.Position = UDim2.new(0,12,0,12)
    header.Text = "AutoFarm"
    header.Font = Enum.Font.SourceSansBold
    header.TextSize = 22
    header.TextColor3 = Color3.fromRGB(240,240,240)
    header.BackgroundTransparency = 1
    header.Parent = autoFarmContent

    local subtitle = Instance.new("TextLabel")
    subtitle.Size = UDim2.new(1, -24, 0, 16)
    subtitle.Position = UDim2.new(0,12,0,46)
    subtitle.Text = "Made by:JomFSR"
    subtitle.Font = Enum.Font.SourceSans
    subtitle.TextSize = 12
    subtitle.TextColor3 = Color3.fromRGB(170,170,170)
    subtitle.BackgroundTransparency = 1
    subtitle.Parent = autoFarmContent

    local content = Instance.new("Frame")
    content.Size = UDim2.new(1, -32, 1, -88)
    content.Position = UDim2.new(0,16,0,80)
    content.BackgroundTransparency = 1
    content.Parent = autoFarmContent

    local panel = Instance.new("Frame")
    panel.Size = UDim2.new(0, 700, 0, 380)
    panel.AnchorPoint = Vector2.new(0.5,0)
    panel.Position = UDim2.new(0.5, 0, 0, 6)
    panel.BackgroundColor3 = Color3.fromRGB(40,42,44)
    panel.Parent = content
    Instance.new("UICorner", panel).CornerRadius = UDim.new(0,8)

    local inner = Instance.new("Frame")
    inner.Size = UDim2.new(1, -36, 1, -36)
    inner.Position = UDim2.new(0, 18, 0, 18)
    inner.BackgroundTransparency = 1
    inner.Parent = panel

    local panelTitle = Instance.new("TextLabel")
    panelTitle.Size = UDim2.new(1,0,0,24)
    panelTitle.Position = UDim2.new(0,0,0,0)
    panelTitle.Text = "Select Target"
    panelTitle.Font = Enum.Font.SourceSansSemibold
    panelTitle.TextSize = 16
    panelTitle.TextColor3 = Color3.fromRGB(240,240,240)
    panelTitle.BackgroundTransparency = 1
    panelTitle.Parent = inner

    local selectedLabel = Instance.new("TextLabel")
    selectedLabel.Size = UDim2.new(1,0,0,18)
    selectedLabel.Position = UDim2.new(0,0,0,28)
    selectedLabel.Text = "Selected: " .. tostring(getgenv().MONSTER_NAME or "All")
    selectedLabel.Font = Enum.Font.SourceSans
    selectedLabel.TextSize = 13
    selectedLabel.TextColor3 = Color3.fromRGB(200,200,200)
    selectedLabel.BackgroundTransparency = 1
    selectedLabel.Parent = inner

    local dropdown = Instance.new("TextButton")
    dropdown.Size = UDim2.new(1,0,0,36)
    dropdown.Position = UDim2.new(0,0,0,56)
    dropdown.Text = tostring(getgenv().MONSTER_NAME or "Choose Enemy...")
    dropdown.Font = Enum.Font.SourceSans
    dropdown.TextSize = 14
    dropdown.TextColor3 = Color3.fromRGB(230,230,230)
    dropdown.BackgroundColor3 = Color3.fromRGB(46,49,52)
    dropdown.AutoButtonColor = true
    dropdown.Parent = inner
    Instance.new("UICorner", dropdown).CornerRadius = UDim.new(0,6)

    local listFrame = Instance.new("Frame")
    listFrame.Size = UDim2.new(1, 0, 0, 200)
    listFrame.Position = UDim2.new(0, 0, 0, 100)
    listFrame.BackgroundColor3 = Color3.fromRGB(38,40,42)
    listFrame.Visible = false
    listFrame.Parent = inner
    Instance.new("UICorner", listFrame).CornerRadius = UDim.new(0,6)

    local scroll = Instance.new("ScrollingFrame")
    scroll.Size = UDim2.new(1, -12, 1, -12)
    scroll.Position = UDim2.new(0, 6, 0, 6)
    scroll.BackgroundTransparency = 1
    scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    scroll.ScrollBarThickness = 8
    scroll.Parent = listFrame

    local uiLayout = Instance.new("UIListLayout")
    uiLayout.Parent = scroll
    uiLayout.Padding = UDim.new(0,8)
    uiLayout.SortOrder = Enum.SortOrder.LayoutOrder

    for i, name in ipairs(ENEMY_LIST) do
        local entry = Instance.new("TextButton")
        entry.Name = "Entry_"..i
        entry.Size = UDim2.new(1, -12, 0, 36)
        entry.BackgroundColor3 = Color3.fromRGB(58,58,64)
        entry.Position = UDim2.new(0, 6, 0, 0)
        entry.Text = name
        entry.Font = Enum.Font.SourceSans
        entry.TextSize = 14
        entry.TextColor3 = Color3.fromRGB(245,245,245)
        entry.Parent = scroll
        Instance.new("UICorner", entry).CornerRadius = UDim.new(0,6)

        entry.MouseButton1Click:Connect(function()
            selectedLabel.Text = "Selected: " .. name
            dropdown.Text = name
            getgenv().MONSTER_NAME = name
            MONSTER_NAME = name
            currentTarget = nil
            listFrame.Visible = false
            print("Selection set to:", name)
        end)
    end

    task.spawn(function()
        task.wait(0.05)
        local total = 0
        for _, v in ipairs(scroll:GetChildren()) do
            if v:IsA("TextButton") then
                total = total + v.Size.Y.Offset + uiLayout.Padding.Offset
            end
        end
        scroll.CanvasSize = UDim2.new(0, 0, 0, total + 12)
    end)

    dropdown.MouseButton1Click:Connect(function()
        listFrame.Visible = not listFrame.Visible
    end)

    local distRow = Instance.new("Frame")
    distRow.Size = UDim2.new(1, 0, 0, 44)
    distRow.Position = UDim2.new(0, 0, 0, 312)
    distRow.BackgroundTransparency = 1
    distRow.Parent = inner

    local distLabel = Instance.new("TextLabel")
    distLabel.Size = UDim2.new(0.5, 0, 1, 0)
    distLabel.Position = UDim2.new(0, 0, 0, 0)
    distLabel.BackgroundTransparency = 1
    distLabel.Font = Enum.Font.SourceSans
    distLabel.TextSize = 13
    distLabel.Text = "Follow Distance (studs)"
    distLabel.TextColor3 = Color3.fromRGB(220,220,220)
    distLabel.TextXAlignment = Enum.TextXAlignment.Left
    distLabel.Parent = distRow

    local controls = Instance.new("Frame")
    controls.Size = UDim2.new(0.5, 0, 1, 0)
    controls.Position = UDim2.new(0.5, 0, 0, 0)
    controls.BackgroundTransparency = 1
    controls.Parent = distRow

    local btnMinus = Instance.new("TextButton")
    btnMinus.Size = UDim2.new(0, 44, 0, 28)
    btnMinus.Position = UDim2.new(0.06, 0, 0.15, 0)
    btnMinus.BackgroundColor3 = Color3.fromRGB(58,58,64)
    btnMinus.Font = Enum.Font.SourceSansBold
    btnMinus.Text = "-"
    btnMinus.TextColor3 = Color3.fromRGB(255,255,255)
    btnMinus.Parent = controls
    Instance.new("UICorner", btnMinus).CornerRadius = UDim.new(0,6)

    local inputBox = Instance.new("TextBox")
    inputBox.Size = UDim2.new(0, 120, 0, 28)
    inputBox.Position = UDim2.new(0.32, 0, 0.15, 0)
    inputBox.Font = Enum.Font.SourceSans
    inputBox.TextSize = 16
    inputBox.TextColor3 = Color3.fromRGB(230,230,230)
    inputBox.BackgroundColor3 = Color3.fromRGB(46,49,52)
    inputBox.ClearTextOnFocus = false
    inputBox.Text = tostring(getgenv().BEHIND_DISTANCE or BEHIND_DISTANCE)
    inputBox.Parent = controls
    Instance.new("UICorner", inputBox).CornerRadius = UDim.new(0,6)

    local btnPlus = Instance.new("TextButton")
    btnPlus.Size = UDim2.new(0, 44, 0, 28)
    btnPlus.Position = UDim2.new(0.78, 0, 0.15, 0)
    btnPlus.BackgroundColor3 = Color3.fromRGB(58,58,64)
    btnPlus.Font = Enum.Font.SourceSansBold
    btnPlus.Text = "+"
    btnPlus.TextColor3 = Color3.fromRGB(255,255,255)
    btnPlus.Parent = controls
    Instance.new("UICorner", btnPlus).CornerRadius = UDim.new(0,6)

    local function applyDistance(value)
        local n = tonumber(value) or BEHIND_DISTANCE
        n = math.floor(n + 0.5)
        if n < DIST_MIN then n = DIST_MIN end
        if n > DIST_MAX then n = DIST_MAX end
        BEHIND_DISTANCE = n
        getgenv().BEHIND_DISTANCE = n
        inputBox.Text = tostring(n)
        local apiRef = getgenv().TeleportSnake or _G.TeleportSnake or api
        if apiRef and type(apiRef.setDistance) == "function" then
            pcall(apiRef.setDistance, n)
        end
        print("Follow Distance set to:", n)
    end

    btnMinus.MouseButton1Click:Connect(function()
        local cur = tonumber(inputBox.Text) or BEHIND_DISTANCE
        applyDistance(cur - 1)
    end)
    btnPlus.MouseButton1Click:Connect(function()
        local cur = tonumber(inputBox.Text) or BEHIND_DISTANCE
        applyDistance(cur + 1)
    end)
    inputBox.FocusLost:Connect(function()
        applyDistance(inputBox.Text)
    end)

    local toggleBg = Instance.new("Frame")
    toggleBg.Size = UDim2.new(0, 180, 0, 40)
    toggleBg.Position = UDim2.new(0.5, -90, 0, panel.Position.Y.Offset + panel.Size.Y.Offset + 12)
    toggleBg.BackgroundColor3 = Color3.fromRGB(190,80,80)
    toggleBg.Parent = content
    Instance.new("UICorner", toggleBg).CornerRadius = UDim.new(0,10)

    local toggleText = Instance.new("TextLabel")
    toggleText.Size = UDim2.new(1,0,1,0)
    toggleText.BackgroundTransparency = 1
    toggleText.Font = Enum.Font.SourceSansBold
    toggleText.TextSize = 16
    toggleText.TextColor3 = Color3.fromRGB(255,255,255)
    toggleText.Text = "AutoFarm: Off"
    toggleText.Parent = toggleBg

    local isOn = false
    local function setToggle(on)
        isOn = on
        if isOn then
            toggleBg.BackgroundColor3 = Color3.fromRGB(78,150,83)
            toggleText.Text = "AutoFarm: On"
            local sel = tostring(getgenv().MONSTER_NAME or "All")
            local apiRef = getgenv().TeleportSnake or _G.TeleportSnake or api
            if apiRef and type(apiRef.setMonsterName) == "function" then pcall(apiRef.setMonsterName, sel) end
            if apiRef and type(apiRef.start) == "function" then pcall(apiRef.start) end
        else
            toggleBg.BackgroundColor3 = Color3.fromRGB(190,80,80)
            toggleText.Text = "AutoFarm: Off"
            local apiRef = getgenv().TeleportSnake or _G.TeleportSnake or api
            if apiRef and type(apiRef.stop) == "function" then pcall(apiRef.stop) end
        end
    end

    toggleBg.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 then
            setToggle(not isOn)
        end
    end)

    setToggle(active)

    -- ===== QUEST NPC CONTENT =====
    local questNPCContent = Instance.new("Frame")
    questNPCContent.Name = "QuestNPCContent"
    questNPCContent.Size = UDim2.new(1, 0, 1, 0)
    questNPCContent.BackgroundTransparency = 1
    questNPCContent.Visible = false
    questNPCContent.Parent = main

    local questHeader = Instance.new("TextLabel")
    questHeader.Size = UDim2.new(1, -24, 0, 48)
    questHeader.Position = UDim2.new(0,12,0,12)
    questHeader.Text = "Quest NPCs"
    questHeader.Font = Enum.Font.SourceSansBold
    questHeader.TextSize = 22
    questHeader.TextColor3 = Color3.fromRGB(240,240,240)
    questHeader.BackgroundTransparency = 1
    questHeader.Parent = questNPCContent

    local questSubtitle = Instance.new("TextLabel")
    questSubtitle.Size = UDim2.new(1, -24, 0, 16)
    questSubtitle.Position = UDim2.new(0,12,0,46)
    questSubtitle.Text = "Click to teleport to quest givers"
    questSubtitle.Font = Enum.Font.SourceSans
    questSubtitle.TextSize = 12
    questSubtitle.TextColor3 = Color3.fromRGB(170,170,170)
    questSubtitle.BackgroundTransparency = 1
    questSubtitle.Parent = questNPCContent

    local questPanel = Instance.new("Frame")
    questPanel.Size = UDim2.new(0, 750, 0, 420)
    questPanel.AnchorPoint = Vector2.new(0.5,0)
    questPanel.Position = UDim2.new(0.5, 0, 0, 75)
    questPanel.BackgroundColor3 = Color3.fromRGB(40,42,44)
    questPanel.Parent = questNPCContent
    Instance.new("UICorner", questPanel).CornerRadius = UDim.new(0,8)

    local questScroll = Instance.new("ScrollingFrame")
    questScroll.Size = UDim2.new(1, -24, 1, -24)
    questScroll.Position = UDim2.new(0, 12, 0, 12)
    questScroll.BackgroundTransparency = 1
    questScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    questScroll.ScrollBarThickness = 8
    questScroll.Parent = questPanel

    local questLayout = Instance.new("UIListLayout")
    questLayout.Parent = questScroll
    questLayout.Padding = UDim.new(0,8)
    questLayout.SortOrder = Enum.SortOrder.LayoutOrder

    for i, npcData in ipairs(QUEST_NPCS) do
        local npcEntry = Instance.new("Frame")
        npcEntry.Name = "NPC_"..i
        npcEntry.Size = UDim2.new(1, -12, 0, 50)
        npcEntry.BackgroundColor3 = Color3.fromRGB(48,50,52)
        npcEntry.Parent = questScroll
        Instance.new("UICorner", npcEntry).CornerRadius = UDim.new(0,6)

        local npcName = Instance.new("TextLabel")
        npcName.Size = UDim2.new(0.65, 0, 1, 0)
        npcName.Position = UDim2.new(0, 12, 0, 0)
        npcName.BackgroundTransparency = 1
        npcName.Text = npcData.name
        npcName.Font = Enum.Font.SourceSans
        npcName.TextSize = 15
        npcName.TextColor3 = Color3.fromRGB(240,240,240)
        npcName.TextXAlignment = Enum.TextXAlignment.Left
        npcName.Parent = npcEntry

        local statusLabel = Instance.new("TextLabel")
        statusLabel.Size = UDim2.new(0.2, 0, 1, 0)
        statusLabel.Position = UDim2.new(0.45, 0, 0, 0)
        statusLabel.BackgroundTransparency = 1
        statusLabel.Font = Enum.Font.SourceSansItalic
        statusLabel.TextSize = 12
        if npcData.path and npcData.path.Parent then
            statusLabel.Text = "Found"
            statusLabel.TextColor3 = Color3.fromRGB(100,255,100)
        else
            statusLabel.Text = "Missing"
            statusLabel.TextColor3 = Color3.fromRGB(255,100,100)
        end
        statusLabel.Parent = npcEntry

        local tpButton = Instance.new("TextButton")
        tpButton.Size = UDim2.new(0, 80, 0, 32)
        tpButton.Position = UDim2.new(1, -92, 0.5, -16)
        tpButton.BackgroundColor3 = Color3.fromRGB(70,140,200)
        tpButton.Font = Enum.Font.SourceSansBold
        tpButton.Text = "Teleport"
        tpButton.TextSize = 14
        tpButton.TextColor3 = Color3.fromRGB(255,255,255)
        tpButton.Parent = npcEntry
        Instance.new("UICorner", tpButton).CornerRadius = UDim.new(0,6)

        tpButton.MouseButton1Click:Connect(function()
            if npcData.path and npcData.path.Parent then
                teleportToNPC(npcData.path)
            else
                warn("Cannot teleport: NPC not found -", npcData.name)
            end
        end)
    end

    task.spawn(function()
        task.wait(0.1)
        local total = 0
        for _, v in ipairs(questScroll:GetChildren()) do
            if v:IsA("Frame") then
                total = total + v.Size.Y.Offset + questLayout.Padding.Offset
            end
        end
        questScroll.CanvasSize = UDim2.new(0, 0, 0, total + 12)
    end)

    -- ===== AUTO QUEST CONTENT =====
    local autoQuestContent = Instance.new("Frame")
    autoQuestContent.Name = "AutoQuestContent"
    autoQuestContent.Size = UDim2.new(1, 0, 1, 0)
    autoQuestContent.BackgroundTransparency = 1
    autoQuestContent.Visible = false
    autoQuestContent.Parent = main

    local autoQuestHeader = Instance.new("TextLabel")
    autoQuestHeader.Size = UDim2.new(1, -24, 0, 48)
    autoQuestHeader.Position = UDim2.new(0,12,0,12)
    autoQuestHeader.Text = "AutoQuest"
    autoQuestHeader.Font = Enum.Font.SourceSansBold
    autoQuestHeader.TextSize = 22
    autoQuestHeader.TextColor3 = Color3.fromRGB(240,240,240)
    autoQuestHeader.BackgroundTransparency = 1
    autoQuestHeader.Parent = autoQuestContent

    local autoQuestSubtitle = Instance.new("TextLabel")
    autoQuestSubtitle.Size = UDim2.new(1, -24, 0, 16)
    autoQuestSubtitle.Position = UDim2.new(0,12,0,46)
    autoQuestSubtitle.Text = "Automatically accept and farm quests"
    autoQuestSubtitle.Font = Enum.Font.SourceSans
    autoQuestSubtitle.TextSize = 12
    autoQuestSubtitle.TextColor3 = Color3.fromRGB(170,170,170)
    autoQuestSubtitle.BackgroundTransparency = 1
    autoQuestSubtitle.Parent = autoQuestContent

    local autoQuestPanel = Instance.new("Frame")
    autoQuestPanel.Size = UDim2.new(0, 700, 0, 380)
    autoQuestPanel.AnchorPoint = Vector2.new(0.5,0)
    autoQuestPanel.Position = UDim2.new(0.5, 0, 0, 75)
    autoQuestPanel.BackgroundColor3 = Color3.fromRGB(40,42,44)
    autoQuestPanel.Parent = autoQuestContent
    Instance.new("UICorner", autoQuestPanel).CornerRadius = UDim.new(0,8)

    local autoQuestInner = Instance.new("Frame")
    autoQuestInner.Size = UDim2.new(1, -36, 1, -36)
    autoQuestInner.Position = UDim2.new(0, 18, 0, 18)
    autoQuestInner.BackgroundTransparency = 1
    autoQuestInner.Parent = autoQuestPanel

    local statusSection = Instance.new("Frame")
    statusSection.Size = UDim2.new(1, 0, 0, 80)
    statusSection.Position = UDim2.new(0, 0, 0, 0)
    statusSection.BackgroundColor3 = Color3.fromRGB(48,50,52)
    statusSection.Parent = autoQuestInner
    Instance.new("UICorner", statusSection).CornerRadius = UDim.new(0,6)

    local questStatusTitle = Instance.new("TextLabel")
    questStatusTitle.Size = UDim2.new(1, -20, 0, 24)
    questStatusTitle.Position = UDim2.new(0, 10, 0, 8)
    questStatusTitle.Text = "Quest Status"
    questStatusTitle.Font = Enum.Font.SourceSansBold
    questStatusTitle.TextSize = 15
    questStatusTitle.TextColor3 = Color3.fromRGB(220,220,220)
    questStatusTitle.TextXAlignment = Enum.TextXAlignment.Left
    questStatusTitle.BackgroundTransparency = 1
    questStatusTitle.Parent = statusSection

    local questStatusLabel = Instance.new("TextLabel")
    questStatusLabel.Size = UDim2.new(1, -20, 0, 22)
    questStatusLabel.Position = UDim2.new(0, 10, 0, 35)
    questStatusLabel.Text = "Status: Idle"
    questStatusLabel.Font = Enum.Font.SourceSans
    questStatusLabel.TextSize = 14
    questStatusLabel.TextColor3 = Color3.fromRGB(180,180,180)
    questStatusLabel.TextXAlignment = Enum.TextXAlignment.Left
    questStatusLabel.BackgroundTransparency = 1
    questStatusLabel.Parent = statusSection

    questProgressLabel = Instance.new("TextLabel")
    questProgressLabel.Size = UDim2.new(1, -20, 0, 22)
    questProgressLabel.Position = UDim2.new(0, 10, 0, 54)
    questProgressLabel.Text = "Progress: 0/10"
    questProgressLabel.Font = Enum.Font.SourceSans
    questProgressLabel.TextSize = 13
    questProgressLabel.TextColor3 = Color3.fromRGB(150,200,255)
    questProgressLabel.TextXAlignment = Enum.TextXAlignment.Left
    questProgressLabel.BackgroundTransparency = 1
    questProgressLabel.Parent = statusSection

    local questsTitle = Instance.new("TextLabel")
    questsTitle.Size = UDim2.new(1, 0, 0, 24)
    questsTitle.Position = UDim2.new(0, 0, 0, 95)
    questsTitle.Text = "Available Quests"
    questsTitle.Font = Enum.Font.SourceSansSemibold
    questsTitle.TextSize = 15
    questsTitle.TextColor3 = Color3.fromRGB(220,220,220)
    questsTitle.TextXAlignment = Enum.TextXAlignment.Left
    questsTitle.BackgroundTransparency = 1
    questsTitle.Parent = autoQuestInner

    local chichiQuestBtn = Instance.new("TextButton")
    chichiQuestBtn.Size = UDim2.new(1, 0, 0, 50)
    chichiQuestBtn.Position = UDim2.new(0, 0, 0, 125)
    chichiQuestBtn.BackgroundColor3 = Color3.fromRGB(70,140,200)
    chichiQuestBtn.Font = Enum.Font.SourceSansBold
    chichiQuestBtn.Text = "Start Chichi Quest (Big Snake Hunt)"
    chichiQuestBtn.TextSize = 16
    chichiQuestBtn.TextColor3 = Color3.fromRGB(255,255,255)
    chichiQuestBtn.Parent = autoQuestInner
    Instance.new("UICorner", chichiQuestBtn).CornerRadius = UDim.new(0,6)

    chichiQuestBtn.MouseEnter:Connect(function()
        chichiQuestBtn.BackgroundColor3 = Color3.fromRGB(80,160,220)
    end)
    chichiQuestBtn.MouseLeave:Connect(function()
        chichiQuestBtn.BackgroundColor3 = Color3.fromRGB(70,140,200)
    end)

    chichiQuestBtn.MouseButton1Click:Connect(function()
        startChichiQuest(questStatusLabel)
    end)

    local infoSection = Instance.new("Frame")
    infoSection.Size = UDim2.new(1, 0, 0, 150)
    infoSection.Position = UDim2.new(0, 0, 0, 185)
    infoSection.BackgroundColor3 = Color3.fromRGB(48,50,52)
    infoSection.Parent = autoQuestInner
    Instance.new("UICorner", infoSection).CornerRadius = UDim.new(0,6)

    local infoTitle = Instance.new("TextLabel")
    infoTitle.Size = UDim2.new(1, -20, 0, 24)
    infoTitle.Position = UDim2.new(0, 10, 0, 8)
    infoTitle.Text = "Quest Information"
    infoTitle.Font = Enum.Font.SourceSansBold
    infoTitle.TextSize = 14
    infoTitle.TextColor3 = Color3.fromRGB(220,220,220)
    infoTitle.TextXAlignment = Enum.TextXAlignment.Left
    infoTitle.BackgroundTransparency = 1
    infoTitle.Parent = infoSection

    local infoText = Instance.new("TextLabel")
    infoText.Size = UDim2.new(1, -20, 1, -36)
    infoText.Position = UDim2.new(0, 10, 0, 32)
    infoText.Text = "Chichi Quest: Automatically accepts the Big Snake daily quest\nAuto-farms Big Snakes until 10 are defeated\nProgress is tracked automatically\nFarm will stop when quest is complete"
    infoText.Font = Enum.Font.SourceSans
    infoText.TextSize = 13
    infoText.TextColor3 = Color3.fromRGB(170,170,170)
    infoText.TextXAlignment = Enum.TextXAlignment.Left
    infoText.TextYAlignment = Enum.TextYAlignment.Top
    infoText.TextWrapped = true
    infoText.BackgroundTransparency = 1
    infoText.Parent = infoSection

    -- ===== MOVEMENT CONTENT =====
    local movementContent = Instance.new("Frame")
    movementContent.Name = "MovementContent"
    movementContent.Size = UDim2.new(1, 0, 1, 0)
    movementContent.BackgroundTransparency = 1
    movementContent.Visible = false
    movementContent.Parent = main

    local movementHeader = Instance.new("TextLabel")
    movementHeader.Size = UDim2.new(1, -24, 0, 48)
    movementHeader.Position = UDim2.new(0,12,0,12)
    movementHeader.Text = "Movement"
    movementHeader.Font = Enum.Font.SourceSansBold
    movementHeader.TextSize = 22
    movementHeader.TextColor3 = Color3.fromRGB(240,240,240)
    movementHeader.BackgroundTransparency = 1
    movementHeader.Parent = movementContent

    local movementSubtitle = Instance.new("TextLabel")
    movementSubtitle.Size = UDim2.new(1, -24, 0, 16)
    movementSubtitle.Position = UDim2.new(0,12,0,46)
    movementSubtitle.Text = "Control your character's movement abilities"
    movementSubtitle.Font = Enum.Font.SourceSans
    movementSubtitle.TextSize = 12
    movementSubtitle.TextColor3 = Color3.fromRGB(170,170,170)
    movementSubtitle.BackgroundTransparency = 1
    movementSubtitle.Parent = movementContent

    local movementPanel = Instance.new("Frame")
    movementPanel.Size = UDim2.new(0, 700, 0, 380)
    movementPanel.AnchorPoint = Vector2.new(0.5,0)
    movementPanel.Position = UDim2.new(0.5, 0, 0, 75)
    movementPanel.BackgroundColor3 = Color3.fromRGB(40,42,44)
    movementPanel.Parent = movementContent
    Instance.new("UICorner", movementPanel).CornerRadius = UDim.new(0,8)

    local movementInner = Instance.new("ScrollingFrame")
    movementInner.Size = UDim2.new(1, -24, 1, -24)
    movementInner.Position = UDim2.new(0, 12, 0, 12)
    movementInner.BackgroundTransparency = 1
    movementInner.ScrollBarThickness = 8
    movementInner.CanvasSize = UDim2.new(0, 0, 0, 0)
    movementInner.Parent = movementPanel

    local movementLayout = Instance.new("UIListLayout")
    movementLayout.Parent = movementInner
    movementLayout.Padding = UDim.new(0, 12)
    movementLayout.SortOrder = Enum.SortOrder.LayoutOrder

    local flyToggleFrame = Instance.new("Frame")
    flyToggleFrame.Size = UDim2.new(1, 0, 0, 60)
    flyToggleFrame.BackgroundColor3 = Color3.fromRGB(48,50,52)
    flyToggleFrame.Parent = movementInner
    Instance.new("UICorner", flyToggleFrame).CornerRadius = UDim.new(0,6)

    local flyLabel = Instance.new("TextLabel")
    flyLabel.Size = UDim2.new(1, -160, 1, 0)
    flyLabel.Position = UDim2.new(0, 12, 0, 0)
    flyLabel.Text = "Enable Flight"
    flyLabel.Font = Enum.Font.SourceSansBold
    flyLabel.TextSize = 15
    flyLabel.TextColor3 = Color3.fromRGB(220,220,220)
    flyLabel.TextXAlignment = Enum.TextXAlignment.Left
    flyLabel.BackgroundTransparency = 1
    flyLabel.Parent = flyToggleFrame

    local flyToggleBtn = Instance.new("TextButton")
    flyToggleBtn.Size = UDim2.new(0, 120, 0, 40)
    flyToggleBtn.Position = UDim2.new(1, -132, 0.5, -20)
    flyToggleBtn.BackgroundColor3 = Color3.fromRGB(190,80,80)
    flyToggleBtn.Font = Enum.Font.SourceSansBold
    flyToggleBtn.Text = "OFF"
    flyToggleBtn.TextSize = 14
    flyToggleBtn.TextColor3 = Color3.fromRGB(255,255,255)
    flyToggleBtn.Parent = flyToggleFrame
    Instance.new("UICorner", flyToggleBtn).CornerRadius = UDim.new(0,8)

    flyToggleBtn.MouseButton1Click:Connect(function()
        flying = not flying
        if flying then
            flyToggleBtn.BackgroundColor3 = Color3.fromRGB(78,150,83)
            flyToggleBtn.Text = "ON"
            enableFly()
        else
            flyToggleBtn.BackgroundColor3 = Color3.fromRGB(190,80,80)
            flyToggleBtn.Text = "OFF"
            disableFly()
        end
    end)

    createSlider(movementInner, {
        Name = "Flight Speed",
        Min = 100,
        Max = 1500,
        Default = FLY_SPEED,
        Suffix = " studs/s",
        Callback = function(value) FLY_SPEED = value end
    })

    createSlider(movementInner, {
        Name = "Vertical Speed",
        Min = 100,
        Max = 1500,
        Default = VERTICAL_SPEED,
        Suffix = " studs/s",
        Callback = function(value) VERTICAL_SPEED = value end
    })

    createSlider(movementInner, {
        Name = "Dash Count",
        Min = 0,
        Max = 100,
        Default = 0,
        Suffix = " dashes",
        Callback = function(value)
            local char = player.Character
            if char then
                pcall(function() char:SetAttribute("BaseDashes", value) end)
            end
        end
    })

    task.spawn(function()
        task.wait(0.1)
        local totalHeight = movementLayout.AbsoluteContentSize.Y
        movementInner.CanvasSize = UDim2.new(0, 0, 0, totalHeight + 24)
    end)

    -- ===== AUTO DAILY QUEST CONTENT =====
    local dailyQuestContent = Instance.new("Frame")
    dailyQuestContent.Name = "DailyQuestContent"
    dailyQuestContent.Size = UDim2.new(1, 0, 1, 0)
    dailyQuestContent.BackgroundTransparency = 1
    dailyQuestContent.Visible = false
    dailyQuestContent.Parent = main

    local dailyQuestHeader = Instance.new("TextLabel")
    dailyQuestHeader.Size = UDim2.new(1, -24, 0, 48)
    dailyQuestHeader.Position = UDim2.new(0,12,0,12)
    dailyQuestHeader.Text = "Auto Daily Quest"
    dailyQuestHeader.Font = Enum.Font.SourceSansBold
    dailyQuestHeader.TextSize = 22
    dailyQuestHeader.TextColor3 = Color3.fromRGB(240,240,240)
    dailyQuestHeader.BackgroundTransparency = 1
    dailyQuestHeader.Parent = dailyQuestContent

    local dailyQuestSubtitle = Instance.new("TextLabel")
    dailyQuestSubtitle.Size = UDim2.new(1, -24, 0, 16)
    dailyQuestSubtitle.Position = UDim2.new(0,12,0,46)
    dailyQuestSubtitle.Text = "Select a quest NPC to start farming daily quests automatically"
    dailyQuestSubtitle.Font = Enum.Font.SourceSans
    dailyQuestSubtitle.TextSize = 12
    dailyQuestSubtitle.TextColor3 = Color3.fromRGB(170,170,170)
    dailyQuestSubtitle.BackgroundTransparency = 1
    dailyQuestSubtitle.Parent = dailyQuestContent

    -- Main Quest Panel
    local dailyQuestPanel = Instance.new("Frame")
    dailyQuestPanel.Size = UDim2.new(0, 700, 0, 380)
    dailyQuestPanel.AnchorPoint = Vector2.new(0.5,0)
    dailyQuestPanel.Position = UDim2.new(0.5, 0, 0, 75)
    dailyQuestPanel.BackgroundColor3 = Color3.fromRGB(40,42,44)
    dailyQuestPanel.Parent = dailyQuestContent
    Instance.new("UICorner", dailyQuestPanel).CornerRadius = UDim.new(0,8)

    local dailyQuestInner = Instance.new("Frame")
    dailyQuestInner.Size = UDim2.new(1, -36, 1, -36)
    dailyQuestInner.Position = UDim2.new(0, 18, 0, 18)
    dailyQuestInner.BackgroundTransparency = 1
    dailyQuestInner.Parent = dailyQuestPanel

    -- Quest List Title
    local questListTitle = Instance.new("TextLabel")
    questListTitle.Size = UDim2.new(1, 0, 0, 24)
    questListTitle.Position = UDim2.new(0, 0, 0, 0)
    questListTitle.Text = "Available Daily Quests"
    questListTitle.Font = Enum.Font.SourceSansBold
    questListTitle.TextSize = 16
    questListTitle.TextColor3 = Color3.fromRGB(220,220,220)
    questListTitle.TextXAlignment = Enum.TextXAlignment.Left
    questListTitle.BackgroundTransparency = 1
    questListTitle.Parent = dailyQuestInner

    -- Quest List (Scrollable)
    local questListScroll = Instance.new("ScrollingFrame")
    questListScroll.Size = UDim2.new(1, 0, 0, 120)
    questListScroll.Position = UDim2.new(0, 0, 0, 30)
    questListScroll.BackgroundTransparency = 1
    questListScroll.ScrollBarThickness = 6
    questListScroll.BorderSizePixel = 0
    questListScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    questListScroll.Parent = dailyQuestInner

    local questListLayout = Instance.new("UIListLayout")
    questListLayout.Parent = questListScroll
    questListLayout.Padding = UDim.new(0, 8)
    questListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    -- Quest Details Section
    local questDetailsFrame = Instance.new("Frame")
    questDetailsFrame.Size = UDim2.new(1, 0, 1, -160)
    questDetailsFrame.Position = UDim2.new(0, 0, 0, 160)
    questDetailsFrame.BackgroundColor3 = Color3.fromRGB(48,50,52)
    questDetailsFrame.Parent = dailyQuestInner
    Instance.new("UICorner", questDetailsFrame).CornerRadius = UDim.new(0,6)

    local questDetailsInner = Instance.new("Frame")
    questDetailsInner.Size = UDim2.new(1, -24, 1, -24)
    questDetailsInner.Position = UDim2.new(0, 12, 0, 12)
    questDetailsInner.BackgroundTransparency = 1
    questDetailsInner.Parent = questDetailsFrame

    local selectedQuestTitle = Instance.new("TextLabel")
    selectedQuestTitle.Size = UDim2.new(1, 0, 0, 24)
    selectedQuestTitle.Position = UDim2.new(0, 0, 0, 0)
    selectedQuestTitle.Text = "Select a quest from above"
    selectedQuestTitle.Font = Enum.Font.SourceSansBold
    selectedQuestTitle.TextSize = 16
    selectedQuestTitle.TextColor3 = Color3.fromRGB(150,200,255)
    selectedQuestTitle.TextXAlignment = Enum.TextXAlignment.Left
    selectedQuestTitle.BackgroundTransparency = 1
    selectedQuestTitle.Parent = questDetailsInner

    local selectedQuestDesc = Instance.new("TextLabel")
    selectedQuestDesc.Size = UDim2.new(1, 0, 0, 45)
    selectedQuestDesc.Position = UDim2.new(0, 0, 0, 28)
    selectedQuestDesc.Text = "Click on a quest above to see details"
    selectedQuestDesc.Font = Enum.Font.SourceSans
    selectedQuestDesc.TextSize = 13
    selectedQuestDesc.TextColor3 = Color3.fromRGB(180,180,180)
    selectedQuestDesc.TextXAlignment = Enum.TextXAlignment.Left
    selectedQuestDesc.TextYAlignment = Enum.TextYAlignment.Top
    selectedQuestDesc.TextWrapped = true
    selectedQuestDesc.BackgroundTransparency = 1
    selectedQuestDesc.Parent = questDetailsInner

    -- Status Display
    local dailyStatusLabel = Instance.new("TextLabel")
    dailyStatusLabel.Size = UDim2.new(1, 0, 0, 18)
    dailyStatusLabel.Position = UDim2.new(0, 0, 0, 78)
    dailyStatusLabel.Text = "Status: Idle"
    dailyStatusLabel.Font = Enum.Font.SourceSansSemibold
    dailyStatusLabel.TextSize = 14
    dailyStatusLabel.TextColor3 = Color3.fromRGB(180,180,180)
    dailyStatusLabel.TextXAlignment = Enum.TextXAlignment.Left
    dailyStatusLabel.BackgroundTransparency = 1
    dailyStatusLabel.Parent = questDetailsInner

    dailyProgressLabel = Instance.new("TextLabel")
    dailyProgressLabel.Size = UDim2.new(1, 0, 0, 18)
    dailyProgressLabel.Position = UDim2.new(0, 0, 0, 96)
    dailyProgressLabel.Text = "Progress: 0/0"
    dailyProgressLabel.Font = Enum.Font.SourceSans
    dailyProgressLabel.TextSize = 13
    dailyProgressLabel.TextColor3 = Color3.fromRGB(150,200,255)
    dailyProgressLabel.TextXAlignment = Enum.TextXAlignment.Left
    dailyProgressLabel.BackgroundTransparency = 1
    dailyProgressLabel.Parent = questDetailsInner

    -- READ CURRENT QUEST BUTTON
    local readQuestBtn = Instance.new("TextButton")
    readQuestBtn.Size = UDim2.new(0.48, -5, 0, 30)
    readQuestBtn.Position = UDim2.new(0.02, 0, 0, 125)
    readQuestBtn.BackgroundColor3 = Color3.fromRGB(100,150,100)
    readQuestBtn.Font = Enum.Font.SourceSansBold
    readQuestBtn.Text = "READ CURRENT QUEST"
    readQuestBtn.TextSize = 12
    readQuestBtn.TextColor3 = Color3.fromRGB(255,255,255)
    readQuestBtn.Parent = questDetailsInner
    Instance.new("UICorner", readQuestBtn).CornerRadius = UDim.new(0,8)

    -- AUTO DETECT QUEST BUTTON
    local autoDetectBtn = Instance.new("TextButton")
    autoDetectBtn.Size = UDim2.new(0.48, -5, 0, 30)
    autoDetectBtn.Position = UDim2.new(0.5, 5, 0, 125)
    autoDetectBtn.BackgroundColor3 = Color3.fromRGB(150,100,200)
    autoDetectBtn.Font = Enum.Font.SourceSansBold
    autoDetectBtn.Text = "AUTO DETECT QUEST"
    autoDetectBtn.TextSize = 12
    autoDetectBtn.TextColor3 = Color3.fromRGB(255,255,255)
    autoDetectBtn.Parent = questDetailsInner
    Instance.new("UICorner", autoDetectBtn).CornerRadius = UDim.new(0,8)

    -- START BUTTON
    local startDailyBtn = Instance.new("TextButton")
    startDailyBtn.Size = UDim2.new(0.48, -5, 0, 35)
    startDailyBtn.Position = UDim2.new(0.02, 0, 0, 165)
    startDailyBtn.BackgroundColor3 = Color3.fromRGB(70,140,200)
    startDailyBtn.Font = Enum.Font.SourceSansBold
    startDailyBtn.Text = "START QUEST"
    startDailyBtn.TextSize = 14
    startDailyBtn.TextColor3 = Color3.fromRGB(255,255,255)
    startDailyBtn.Visible = false
    startDailyBtn.Parent = questDetailsInner
    Instance.new("UICorner", startDailyBtn).CornerRadius = UDim.new(0,8)

    startDailyBtn.MouseEnter:Connect(function()
        if startDailyBtn.Text == "START QUEST" then
            startDailyBtn.BackgroundColor3 = Color3.fromRGB(80,160,220)
        end
    end)
    startDailyBtn.MouseLeave:Connect(function()
        if startDailyBtn.Text == "START QUEST" then
            startDailyBtn.BackgroundColor3 = Color3.fromRGB(70,140,200)
        else
            startDailyBtn.BackgroundColor3 = Color3.fromRGB(50,100,150)
        end
    end)

    -- STOP BUTTON
    local stopDailyBtn = Instance.new("TextButton")
    stopDailyBtn.Size = UDim2.new(0.48, -5, 0, 35)
    stopDailyBtn.Position = UDim2.new(0.5, 5, 0, 165)
    stopDailyBtn.BackgroundColor3 = Color3.fromRGB(190,80,80)
    stopDailyBtn.Font = Enum.Font.SourceSansBold
    stopDailyBtn.Text = "STOP QUEST"
    stopDailyBtn.TextSize = 14
    stopDailyBtn.TextColor3 = Color3.fromRGB(255,255,255)
    stopDailyBtn.Visible = false
    stopDailyBtn.Parent = questDetailsInner
    Instance.new("UICorner", stopDailyBtn).CornerRadius = UDim.new(0,8)

    stopDailyBtn.MouseEnter:Connect(function()
        stopDailyBtn.BackgroundColor3 = Color3.fromRGB(210,100,100)
    end)
    stopDailyBtn.MouseLeave:Connect(function()
        stopDailyBtn.BackgroundColor3 = Color3.fromRGB(190,80,80)
    end)

    -- Selected quest data
    local selectedDailyQuest = nil

    -- Populate quest list
    for i, questData in ipairs(DAILY_QUEST_NPCS) do
        local questBtn = Instance.new("TextButton")
        questBtn.Size = UDim2.new(1, 0, 0, 36)
        questBtn.BackgroundColor3 = Color3.fromRGB(58,60,62)
        questBtn.Text = ""
        questBtn.AutoButtonColor = false
        questBtn.Parent = questListScroll
        Instance.new("UICorner", questBtn).CornerRadius = UDim.new(0,6)

        local questNameLbl = Instance.new("TextLabel")
        questNameLbl.Size = UDim2.new(1, -20, 1, 0)
        questNameLbl.Position = UDim2.new(0, 10, 0, 0)
        questNameLbl.Text = questData.name
        questNameLbl.Font = Enum.Font.SourceSansSemibold
        questNameLbl.TextSize = 14
        questNameLbl.TextColor3 = Color3.fromRGB(220,220,220)
        questNameLbl.TextXAlignment = Enum.TextXAlignment.Left
        questNameLbl.BackgroundTransparency = 1
        questNameLbl.Parent = questBtn

        questBtn.MouseEnter:Connect(function()
            if selectedDailyQuest ~= questData then
                questBtn.BackgroundColor3 = Color3.fromRGB(68,70,72)
            end
        end)

        questBtn.MouseLeave:Connect(function()
            if selectedDailyQuest ~= questData then
                questBtn.BackgroundColor3 = Color3.fromRGB(58,60,62)
            end
        end)

        questBtn.MouseButton1Click:Connect(function()
            -- Reset all buttons
            for _, btn in ipairs(questListScroll:GetChildren()) do
                if btn:IsA("TextButton") then
                    btn.BackgroundColor3 = Color3.fromRGB(58,60,62)
                end
            end

            -- Highlight selected
            questBtn.BackgroundColor3 = Color3.fromRGB(70,140,200)
            selectedDailyQuest = questData

            -- Update details
            selectedQuestTitle.Text = questData.questName
            local tasksText = "Tasks:\n"
            for j, task in ipairs(questData.tasks) do
                tasksText = tasksText .. "Defeat " .. task.count .. " " .. task.enemy .. "s"
                if j < #questData.tasks then tasksText = tasksText .. "\n" end
            end
            selectedQuestDesc.Text = tasksText

            dailyStatusLabel.Text = "Status: Ready to start"
            dailyProgressLabel.Text = "Progress: 0/" .. questData.totalKills
            startDailyBtn.Visible = true
            stopDailyBtn.Visible = true
        end)
    end

    -- Read Current Quest Button Handler
    readQuestBtn.MouseButton1Click:Connect(function()
        dailyStatusLabel.Text = "Status: Reading current quest..."
        readCurrentQuest()
        dailyStatusLabel.Text = "Status: Quest reading complete (check console for details)"
    end)

    -- Auto Detect Quest Button Handler
    autoDetectBtn.MouseButton1Click:Connect(function()
        dailyStatusLabel.Text = "Status: Auto-detecting quest..."
        local success = autoDetectAndStartQuest()
        if success then
            dailyStatusLabel.Text = "Status: Quest auto-detected and started!"
            startDailyBtn.Visible = true
            stopDailyBtn.Visible = true
        else
            dailyStatusLabel.Text = "Status: No quest detected (check console for details)"
        end
    end)

    -- Start Daily Quest Button Handler
    startDailyBtn.MouseButton1Click:Connect(function()
        if selectedDailyQuest then
            startDailyQuest(selectedDailyQuest, dailyStatusLabel, dailyProgressLabel)
            startDailyBtn.BackgroundColor3 = Color3.fromRGB(50,100,150)
            startDailyBtn.Text = "RUNNING..."
        end
    end)

    -- Stop Daily Quest Button Handler
    stopDailyBtn.MouseButton1Click:Connect(function()
        -- Stop the farm
        active = false
        getgenv().ka = false
        
        -- Reset quest data
        currentQuestData = nil
        questEnemyIndex = 1
        questKillCounts = {}
        questCompleted = false
        
        -- Reset character state
        pcall(function()
            if player.Character then
                local hrp = player.Character:FindFirstChild("HumanoidRootPart")
                local hum = player.Character:FindFirstChild("Humanoid")
                if hrp then 
                    hrp.Anchored = false
                    hrp.Velocity = Vector3.new(0,0,0)
                end
                if hum then 
                    hum.PlatformStand = false
                    hum.AutoRotate = true
                end
            end
        end)
        
        -- Reset UI
        dailyStatusLabel.Text = "Status: Stopped by user"
        dailyKillCount = 0
        dailyProgressLabel.Text = "Progress: Stopped"
        startDailyBtn.BackgroundColor3 = Color3.fromRGB(70,140,200)
        startDailyBtn.Text = "START QUEST"
        
        print("Daily quest stopped by user")
    end)

    -- Update canvas size
    task.spawn(function()
        task.wait(0.1)
        local totalHeight = questListLayout.AbsoluteContentSize.Y
        questListScroll.CanvasSize = UDim2.new(0, 0, 0, totalHeight + 12)
    end)

    -- ===== TAB SWITCHING =====
    local function switchTab(tabName)
        autoFarmContent.Visible = false
        questNPCContent.Visible = false
        autoQuestContent.Visible = false
        movementContent.Visible = false
        dailyQuestContent.Visible = false
        
        tabBtnAutoFarm.TextColor3 = Color3.fromRGB(150,150,150)
        tabBtnQuestNPC.TextColor3 = Color3.fromRGB(150,150,150)
        tabBtnAutoQuest.TextColor3 = Color3.fromRGB(150,150,150)
        tabBtnMovement.TextColor3 = Color3.fromRGB(150,150,150)
        tabBtnDailyQuest.TextColor3 = Color3.fromRGB(150,150,150)
        
        if tabName == "AutoFarm" then
            autoFarmContent.Visible = true
            tabBtnAutoFarm.TextColor3 = Color3.fromRGB(100,180,255)
        elseif tabName == "QuestNPC" then
            questNPCContent.Visible = true
            tabBtnQuestNPC.TextColor3 = Color3.fromRGB(100,180,255)
        elseif tabName == "AutoQuest" then
            autoQuestContent.Visible = true
            tabBtnAutoQuest.TextColor3 = Color3.fromRGB(100,180,255)
        elseif tabName == "Movement" then
            movementContent.Visible = true
            tabBtnMovement.TextColor3 = Color3.fromRGB(100,180,255)
        elseif tabName == "DailyQuest" then
            dailyQuestContent.Visible = true
            tabBtnDailyQuest.TextColor3 = Color3.fromRGB(100,180,255)
        end
    end

    tabBtnAutoFarm.MouseButton1Click:Connect(function() switchTab("AutoFarm") end)
    tabBtnQuestNPC.MouseButton1Click:Connect(function() switchTab("QuestNPC") end)
    tabBtnAutoQuest.MouseButton1Click:Connect(function() switchTab("AutoQuest") end)
    tabBtnMovement.MouseButton1Click:Connect(function() switchTab("Movement") end)
    tabBtnDailyQuest.MouseButton1Click:Connect(function() switchTab("DailyQuest") end)

    -- DRAGGING logic
    do
        local dragging = false
        local dragStart = Vector2.new(0,0)
        local startPos = Vector2.new(0,0)

        headerArea.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                dragStart = input.Position
                startPos = Vector2.new(root.AbsolutePosition.X, root.AbsolutePosition.Y)
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local delta = input.Position - dragStart
                local newX = math.floor(startPos.X + delta.X)
                local newY = math.floor(startPos.Y + delta.Y)
                root.Position = UDim2.new(0, newX, 0, newY)
            end
        end)
    end
end

createUI()

-- sync with getgenv().ka
spawn(function()
    while true do
        task.wait(0.25)
        if getgenv().ka == false then active = false
        elseif getgenv().ka == true then active = true end
    end
end)

print("UI loaded with all tabs (AutoFarm, Quest NPC, AutoQuest, Movement, DailyQuest). Press 'P' to toggle UI.")
